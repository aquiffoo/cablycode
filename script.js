
function getLanguageFromExtension(ext, isDirectory = false) {
    const languageMap = {
        '.js': { language: 'javascript', emoji: '<svg xmlns="http://www.w3.org/2000/svg" aria-label="JavaScript" role="img" viewBox="0 0 512.00 512.00" fill="#3d3846" stroke="#3d3846" transform="rotate(0)" stroke-width="6.656000000000001" height="20px" width="20px"><g id="SVGRepo_bgCarrier" stroke-width="0"/><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round" stroke="#CCCCCC" stroke-width="4.096"/><g id="SVGRepo_iconCarrier"><rect width="512" height="512" rx="15%" fill="#f5c211"/><path d="M324 370c10 17 24 29 47 29c20 0 33-10 33 -24c0-16 -13 -22 -35 -32l-12-5c-35-15 -58 -33 -58 -72c0-36 27 -64 70 -64c31 0 53 11 68 39l-37 24c-8-15 -17 -21 -31 -21c-14 0-23 9 -23 21c0 14 9 20 30 29l12 5c41 18 64 35 64 76c0 43-34 67 -80 67c-45 0-74 -21 -88 -49zm-170 4c8 13 14 25 31 25c16 0 26-6 26 -30V203h48v164c0 50-29 72 -72 72c-39 0-61 -20 -72 -44z"/></g></svg>' },
        '.py': { language: 'python', emoji: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><path fill="#3776AB" d="M11.84,1.5c-5.21,0-4.88,2.26-4.88,2.26v2.33h4.97v0.7H4.7c0,0-3.7-0.42-3.7,5.41c0,5.83,3.23,5.62,3.23,5.62h1.93v-2.7c0,0-0.1-3.23,3.18-3.23h5.48c0,0,3.08,0.05,3.08-2.97V3.96C17.9,3.96,17.36,1.5,11.84,1.5z M8.85,3.42c0.49,0,0.89,0.4,0.89,0.89c0,0.49-0.4,0.89-0.89,0.89c-0.49,0-0.89-0.4-0.89-0.89C7.96,3.82,8.36,3.42,8.85,3.42z"/><path fill="#FFD43B" d="M12.16,22.5c5.21,0,4.88-2.26,4.88-2.26v-2.33h-4.97v-0.7h7.23c0,0,3.7,0.42,3.7-5.41c0-5.83-3.23-5.62-3.23-5.62h-1.93v2.7c0,0,0.1,3.23-3.18,3.23H9.18c0,0-3.08-0.05-3.08,2.97v4.97C6.1,20.04,6.64,22.5,12.16,22.5z M15.15,20.58c-0.49,0-0.89-0.4-0.89-0.89c0-0.49,0.4-0.89,0.89-0.89c0.49,0,0.89,0.4,0.89,0.89C16.04,20.18,15.64,20.58,15.15,20.58z"/></svg>` },
        '.html': { language: 'html', emoji: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512" xml:space="preserve" height="20" width="20px"><path style="fill:#FF6600;" d="M256,0C114.608,0,0,114.608,0,256s114.608,256,256,256s256-114.608,256-256S397.392,0,256,0z   M179.664,202.064l-125.04,62.672v0.672l125.04,62.672v22.064l-148.4-76.432v-17.264l148.4-76.432V202.064z M221.872,362.928h-21.44  l89.232-231.872h21.728L221.872,362.928z M331.568,350.128v-22.064l126-62.672v-0.672l-126-62.672V180l148.4,76.096v17.936  L331.568,350.128z"/></svg>' },
        '.css': { language: 'css', emoji: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512" xml:space="preserve" width="20" height="20"><rect y="400.016" style="fill:#22ACDD;" width="512" height="26.784"/><g><path style="fill:#FF6600;" d="M176,308.256c-11.024,5.408-33.056,10.768-61.312,10.768C49.248,319.024,0,278.656,0,204.32   C0,133.328,49.232,85.2,121.232,85.2c28.912,0,47.184,6.064,55.104,10.096l-7.248,23.888c-11.36-5.36-27.536-9.408-46.816-9.408   c-54.432,0-90.592,33.968-90.592,93.536c0,55.504,32.72,91.168,89.216,91.168c18.224,0,36.832-3.68,48.896-9.408L176,308.256z"/><path style="fill:#FF6600;" d="M209.328,280.016c13.456,8.064,33.056,14.784,53.728,14.784c30.672,0,48.56-15.808,48.56-38.688   c0-21.168-12.4-33.28-43.744-45.072c-37.888-13.136-61.312-32.304-61.312-64.272c0-35.328,29.968-61.568,75.088-61.568   c23.76,0,40.976,5.376,51.328,11.12l-8.288,23.888c-7.584-4.032-23.056-10.768-44.08-10.768c-31.68,0-43.744,18.496-43.744,33.968   c0,21.2,14.128,31.632,46.176,43.712c39.264,14.816,59.216,33.312,59.216,66.64c0,34.96-26.48,65.248-81.248,65.248   c-22.384,0-46.848-6.384-59.248-14.448L209.328,280.016z"/><path style="fill:#FF6600;" d="M379.072,280.016c13.456,8.064,33.056,14.784,53.728,14.784c30.672,0,48.56-15.808,48.56-38.688   c0-21.168-12.4-33.28-43.744-45.072c-37.888-13.136-61.312-32.304-61.312-64.272c0-35.328,29.968-61.568,75.088-61.568   c23.76,0,40.976,5.376,51.328,11.12l-8.288,23.888c-7.584-4.032-23.056-10.768-44.08-10.768c-31.68,0-43.744,18.496-43.744,33.968   c0,21.2,14.128,31.632,46.176,43.712C492.048,201.952,512,220.448,512,253.776c0,34.96-26.48,65.248-81.248,65.248   c-22.384,0-46.848-6.384-59.248-14.448L379.072,280.016z"/></g></svg>' },
        '.json': { language: 'json', emoji: '<svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg" width="20px" height="20px"><title>file_type_light_json</title><path d="M4.014,14.976a2.51,2.51,0,0,0,1.567-.518A2.377,2.377,0,0,0,6.386,13.1,15.261,15.261,0,0,0,6.6,10.156q.012-2.085.075-2.747a5.236,5.236,0,0,1,.418-1.686,3.025,3.025,0,0,1,.755-1.018A3.046,3.046,0,0,1,9,4.125,6.762,6.762,0,0,1,10.544,4h.7V5.96h-.387a2.338,2.338,0,0,0-1.723.468A3.4,3.4,0,0,0,8.709,8.52a36.054,36.054,0,0,1-.137,4.133,4.734,4.734,0,0,1-.768,2.06A4.567,4.567,0,0,1,6.1,16a3.809,3.809,0,0,1,1.992,1.754,8.861,8.861,0,0,1,.618,3.865q0,2.435.05,2.9A1.755,1.755,0,0,0,9.264,25.7a2.639,2.639,0,0,0,1.592.337h.387V28h-.7a5.655,5.655,0,0,1-1.773-.2,2.97,2.97,0,0,1-1.324-.93,3.353,3.353,0,0,1-.681-1.63A24.175,24.175,0,0,1,6.6,22.006,16.469,16.469,0,0,0,6.386,18.9a2.408,2.408,0,0,0-.805-1.361,2.489,2.489,0,0,0-1.567-.524Z" style="fill:#fbc02d"/><path d="M27.986,17.011a2.489,2.489,0,0,0-1.567.524,2.408,2.408,0,0,0-.805,1.361,16.469,16.469,0,0,0-.212,3.109,24.175,24.175,0,0,1-.169,3.234,3.353,3.353,0,0,1-.681,1.63,2.97,2.97,0,0,1-1.324.93,5.655,5.655,0,0,1-1.773.2h-.7V26.04h.387a2.639,2.639,0,0,0,1.592-.337,1.755,1.755,0,0,0,.506-1.186q.05-.462.05-2.9a8.861,8.861,0,0,1,.618-3.865A3.809,3.809,0,0,1,25.9,16a4.567,4.567,0,0,1-1.7-1.286,4.734,4.734,0,0,1-.768-2.06,36.054,36.054,0,0,1-.137-4.133,3.4,3.4,0,0,0-.425-2.092,2.338,2.338,0,0,0-1.723-.468h-.387V4h.7A6.762,6.762,0,0,1,23,4.125a3.046,3.046,0,0,1,1.149.581,3.025,3.025,0,0,1,.755,1.018,5.236,5.236,0,0,1,.418,1.686q.062.662.075,2.747a15.261,15.261,0,0,0,.212,2.947,2.377,2.377,0,0,0,.805,1.355,2.51,2.51,0,0,0,1.567.518Z" style="fill:#fbc02d"/></svg>' },
        '.ts': { language: 'typescript', emoji: '<svg aria-label="TypeScript" role="img" viewBox="0 0 512 512" width="20" height="20" xmlns="http://www.w3.org/2000/svg"><rect width="512" height="512" rx="15%" fill="#3178c6"/><path fill="#ffffff" d="m233 284h64v-41H118v41h64v183h51zm84 173c8.1 4.2 18 7.3 29 9.4s23 3.1 35 3.1c12 0 23-1.1 34-3.4c11-2.3 20-6.1 28-11c8.1-5.3 15-12 19-21s7.1-19 7.1-32c0-9.1-1.4-17-4.1-24s-6.6-13-12-18c-5.1-5.3-11-10-18-14s-15-8.2-24-12c-6.6-2.7-12-5.3-18-7.9c-5.2-2.6-9.7-5.2-13-7.8c-3.7-2.7-6.5-5.5-8.5-8.4c-2-3-3-6.3-3-10c0-3.4.89-6.5 2.7-9.3s4.3-5.1 7.5-7.1c3.2-2 7.2-3.5 12-4.6c4.7-1.1 9.9-1.6 16-1.6c4.2 0 8.6.31 13 .94c4.6.63 9.3 1.6 14 2.9c4.7 1.3 9.3 2.9 14 4.9c4.4 2 8.5 4.3 12 6.9v-47c-7.6-2.9-16-5.1-25-6.5s-19-2.1-31-2.1c-12 0-23 1.3-34 3.8s-20 6.5-28 12c-8.1 5.4-14 12-19 21c-4.7 8.4-7 18-7 30c0 15 4.3 28 13 38c8.6 11 22 19 39 27c6.9 2.8 13 5.6 19 8.3s11 5.5 15 8.4c4.3 2.9 7.7 6.1 10 9.5c2.5 3.4 3.8 7.4 3.8 12c0 3.2-.78 6.2-2.3 9s-3.9 5.2-7.1 7.2s-7.1 3.6-12 4.8c-4.7 1.1-10 1.7-17 1.7c-11 0-22-1.9-32-5.7c-11-3.8-21-9.5-28.1-15.44z"/></svg>' },
        '.md': { language: 'markdown', emoji: '<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" version="1.1" width="20" height="20">    <path style="fill:#ffffff;stroke:none;" d="m 65,3 0,19 19,0 z"/>   <path style="fill:#EBEBDA;stroke:#777777;stroke-width:2;" d="m 65,3 0,19 19,0 0,74 -72,0 0,-93 53,0 19,19"/>      <path style="fill:#EBEBDA;stroke:#777777;stroke-width:8;" d="M 25,70 25,30 35,55 45,30 45,70 M 55,70 55,33 Q 70,33 70,48 Q 70,68 55,66 z"/>  </svg>' },
        '.xml': { language: 'xml', emoji: '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 56 56" xml:space="preserve" height="20" width="20"><g><path style="fill:#E9E9E0;" d="M36.985,0H7.963C7.155,0,6.5,0.655,6.5,1.926V55c0,0.345,0.655,1,1.463,1h40.074   c0.808,0,1.463-0.655,1.463-1V12.978c0-0.696-0.093-0.92-0.257-1.085L37.607,0.257C37.442,0.093,37.218,0,36.985,0z"/><polygon style="fill:#D9D7CA;" points="37.5,0.151 37.5,12 49.349,12  "/><path style="fill:#F29C1F;" d="M48.037,56H7.963C7.155,56,6.5,55.345,6.5,54.537V39h43v15.537C49.5,55.345,48.845,56,48.037,56z"/><g><path style="fill:#FFFFFF;" d="M19.379,48.105L21.936,53h-1.9l-1.6-3.801h-0.137L16.576,53h-1.9l2.557-4.895l-2.721-5.182h1.873    l1.777,4.102h0.137l1.928-4.102H22.1L19.379,48.105z"/><path style="fill:#FFFFFF;" d="M31.998,42.924h1.668V53h-1.668v-6.932l-2.256,5.605h-1.449l-2.27-5.605V53h-1.668V42.924h1.668    l2.994,6.891L31.998,42.924z"/><path style="fill:#FFFFFF;" d="M37.863,42.924v8.832h4.635V53h-6.303V42.924H37.863z"/></g><path style="fill:#F29C1F;" d="M15.5,24c-0.256,0-0.512-0.098-0.707-0.293c-0.391-0.391-0.391-1.023,0-1.414l6-6   c0.391-0.391,1.023-0.391,1.414,0s0.391,1.023,0,1.414l-6,6C16.012,23.902,15.756,24,15.5,24z"/><path style="fill:#F29C1F;" d="M21.5,30c-0.256,0-0.512-0.098-0.707-0.293l-6-6c-0.391-0.391-0.391-1.023,0-1.414   s1.023-0.391,1.414,0l6,6c0.391,0.391,0.391,1.023,0,1.414C22.012,29.902,21.756,30,21.5,30z"/><path style="fill:#F29C1F;" d="M33.5,30c-0.256,0-0.512-0.098-0.707-0.293c-0.391-0.391-0.391-1.023,0-1.414l6-6   c0.391-0.391,1.023-0.391,1.414,0s0.391,1.023,0,1.414l-6,6C34.012,29.902,33.756,30,33.5,30z"/><path style="fill:#F29C1F;" d="M39.5,24c-0.256,0-0.512-0.098-0.707-0.293l-6-6c-0.391-0.391-0.391-1.023,0-1.414   s1.023-0.391,1.414,0l6,6c0.391,0.391,0.391,1.023,0,1.414C40.012,23.902,39.756,24,39.5,24z"/><path style="fill:#F29C1F;" d="M24.5,32c-0.11,0-0.223-0.019-0.333-0.058c-0.521-0.184-0.794-0.755-0.61-1.276l6-17   c0.185-0.521,0.753-0.795,1.276-0.61c0.521,0.184,0.794,0.755,0.61,1.276l-6,17C25.298,31.744,24.912,32,24.5,32z"/></g></svg>' },
        '.sql': { language: 'sql', emoji: '<svg viewBox="-8.78 0 70 70" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" width="20" height="20"><metadata><rdf:RDF><cc:Work><dc:subject>Data</dc:subject><dc:identifier>sql-database-generic</dc:identifier><dc:title>SQL Database (Generic)</dc:title><dc:format>image/svg+xml</dc:format><dc:publisher>Amido Limited</dc:publisher><dc:creator>Richard Slater</dc:creator><dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/></cc:Work></rdf:RDF></metadata><path d="m 852.97077,1013.9363 c -6.55238,-0.4723 -13.02857,-2.1216 -17.00034,-4.3296 -2.26232,-1.2576 -3.98589,-2.8032 -4.66223,-4.1807 l -0.4024,-0.8196 0,-25.70807 0,-25.7081 0.31843,-0.6465 c 1.42297,-2.889 5.96432,-5.4935 12.30378,-7.0562 2.15195,-0.5305 5.2586,-1.0588 7.79304,-1.3252 2.58797,-0.2721 9.44765,-0.2307 12.02919,0.073 6.86123,0.8061 12.69967,2.6108 16.29768,5.0377 1.38756,0.9359 2.81137,2.4334 3.29371,3.4642 l 0.41358,0.8838 -0.0354,25.6303 -0.0354,25.63047 -0.33195,0.6744 c -0.18257,0.3709 -0.73406,1.1007 -1.22553,1.6216 -2.99181,3.1715 -9.40919,5.5176 -17.8267,6.5172 -1.71567,0.2038 -9.16916,0.3686 -10.92937,0.2417 z m 12.07501,-22.02839 c -0.0252,-0.0657 -1.00472,-0.93831 -2.17671,-1.93922 -1.17199,-1.00091 -2.18138,-1.86687 -2.24309,-1.92436 -0.0617,-0.0575 0.15481,-0.26106 0.48117,-0.45237 0.32635,-0.19131 0.95163,-0.7235 1.3895,-1.18265 1.2805,-1.34272 1.88466,-3.00131 1.88466,-5.17388 0,-2.1388 -0.65162,-3.8645 -1.95671,-5.1818 -1.31533,-1.3278 -2.82554,-1.8983 -5.02486,-1.8983 -3.39007,0 -5.99368,1.9781 -6.82468,5.1851 -0.28586,1.1031 -0.28432,3.33211 0.003,4.31023 0.74941,2.55136 2.79044,4.40434 5.33062,4.83946 0.8596,0.14724 0.97605,0.21071 1.5621,0.85144 0.34829,0.38078 1.06301,1.14085 1.58827,1.68904 l 0.95501,0.9967 2.53878,0 c 1.39633,0 2.51816,-0.0537 2.49296,-0.11939 z m -8.70653,-7.10848 c -0.61119,-0.31868 -0.84225,-0.56599 -1.19079,-1.27453 -0.26919,-0.54724 -0.31522,-0.85851 -0.31824,-2.15197 -0.003,-1.3143 0.0388,-1.5983 0.31987,-2.169 0.45985,-0.9339 1.09355,-1.376 2.07384,-1.4469 1.36454,-0.099 2.15217,0.5707 2.56498,2.1801 0.50612,1.97321 -0.0504,4.07107 -1.26471,4.76729 -0.63707,0.36527 -1.58737,0.40659 -2.18495,0.095 z m -11.25315,3.66269 c 2.66179,-0.5048 4.1728,-2.0528 4.1728,-4.27495 0,-1.97137 -0.97548,-3.12004 -3.6716,-4.32364 -1.54338,-0.689 -2.10241,-1.1215 -2.10241,-1.6268 0,-0.4188 0.53052,-0.8777 1.14813,-0.993 0.60302,-0.1126 2.20237,0.1652 3.14683,0.5467 l 0.79167,0.3198 0,-1.7524 0,-1.7525 -0.85923,-0.1906 c -0.53103,-0.1178 -1.64689,-0.1885 -2.92137,-0.1849 -1.80528,0 -2.15881,0.044 -2.83818,0.3138 -1.98445,0.7878 -2.92613,2.1298 -2.91107,4.1485 0.0141,1.8898 1.01108,3.06864 3.49227,4.12912 1.46399,0.62572 2.05076,1.10218 2.05076,1.66522 0,1.1965 -1.99362,1.34375 -4.10437,0.30315 -0.57805,-0.28498 -1.09739,-0.54137 -1.1541,-0.56976 -0.0567,-0.0284 -0.10311,0.79023 -0.10311,1.81917 0,1.86239 0.002,1.87137 0.33919,1.99974 1.26979,0.48278 4.07626,0.69787 5.52379,0.42335 z m 30.4308,-1.72766 0,-1.58098 -2.40584,0 -2.40583,0 0,-5.43035 0,-5.4303 -2.13089,0 -2.13088,0 0,7.0113 0,7.01131 4.53672,0 4.53672,0 0,-1.58098 z m -14.84745,-27.70503 c 4.23447,-0.2937 7.4086,-0.8482 10.20178,-1.7821 2.78264,-0.9304 4.42643,-2.0562 4.79413,-3.2834 0.14166,-0.4729 0.13146,-0.6523 -0.0665,-1.1708 -0.88775,-2.3245 -5.84694,-4.1104 -13.42493,-4.8345 -3.24154,-0.3098 -9.13671,-0.2094 -12.22745,0.2081 -4.71604,0.6372 -8.54333,1.8208 -10.2451,3.1683 -3.44251,2.726 0.19793,5.7242 8.66397,7.1354 3.67084,0.6119 8.42674,0.828 12.30414,0.559 z" fill="#00bcf2" transform="translate(-830.906 -943.981)"/></svg>' },
        '.php': { language: 'php', emoji: '<svg viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg" width="20" height="20"><circle cx="16" cy="16" r="14" fill="#8892BF"/><path d="M14.4392 10H16.1192L15.6444 12.5242H17.154C17.9819 12.5419 18.5986 12.7269 19.0045 13.0793C19.4184 13.4316 19.5402 14.1014 19.3698 15.0881L18.5541 19.4889H16.8497L17.6288 15.2863C17.7099 14.8457 17.6856 14.533 17.5558 14.348C17.426 14.163 17.146 14.0705 16.7158 14.0705L15.3644 14.0573L14.3661 19.4889H12.6861L14.4392 10Z" fill="white"/><path fill-rule="evenodd" clip-rule="evenodd" d="M6.74092 12.5243H10.0036C10.9612 12.533 11.6552 12.8327 12.0854 13.4229C12.5156 14.0132 12.6576 14.8193 12.5115 15.8414C12.4548 16.3085 12.3289 16.7665 12.1341 17.2159C11.9474 17.6652 11.6878 18.0704 11.355 18.4317C10.9491 18.8898 10.5149 19.1805 10.0523 19.304C9.58969 19.4274 9.11076 19.489 8.61575 19.489H7.15484L6.69222 22H5L6.74092 12.5243ZM7.43485 17.9956L8.16287 14.0441H8.40879C8.49815 14.0441 8.5914 14.0396 8.6888 14.0309C9.33817 14.0221 9.87774 14.0882 10.308 14.2291C10.7462 14.37 10.8923 14.9031 10.7462 15.8282C10.5678 16.9296 10.2186 17.5727 9.69926 17.7577C9.1799 17.934 8.53053 18.0176 7.75138 18.0088H7.58094C7.53224 18.0088 7.48355 18.0043 7.43485 17.9956Z" fill="white"/><path fill-rule="evenodd" clip-rule="evenodd" d="M24.4365 12.5243H21.1738L19.4329 22H21.1251L21.5878 19.489H23.0487C23.5437 19.489 24.0226 19.4274 24.4852 19.304C24.9479 19.1805 25.382 18.8898 25.7879 18.4317C26.1207 18.0704 26.3803 17.6652 26.567 17.2159C26.7618 16.7665 26.8877 16.3085 26.9444 15.8414C27.0905 14.8193 26.9486 14.0132 26.5183 13.4229C26.0881 12.8327 25.3942 12.533 24.4365 12.5243ZM22.5958 14.0441L21.8678 17.9956C21.9165 18.0043 21.9652 18.0088 22.0139 18.0088H22.1843C22.9635 18.0176 23.6128 17.934 24.1322 17.7577C24.6515 17.5727 25.0007 16.9296 25.1792 15.8282C25.3253 14.9031 25.1792 14.37 24.7409 14.2291C24.3107 14.0882 23.7711 14.0221 23.1217 14.0309C23.0243 14.0396 22.9311 14.0441 22.8417 14.0441H22.5958Z" fill="white"/></svg>' },
        '.c': { language: 'c', emoji: '<svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg" width="20" height="20"><title>file_type_cpp3</title><path d="M29,10.232a2.387,2.387,0,0,0-.318-1.244,2.451,2.451,0,0,0-.936-.879Q22.552,5.241,17.353,2.376A2.642,2.642,0,0,0,14.59,2.4c-1.378.779-8.275,4.565-10.331,5.706A2.287,2.287,0,0,0,3,10.231V21.77a2.4,2.4,0,0,0,.3,1.22,2.434,2.434,0,0,0,.954.9c2.056,1.141,8.954,4.927,10.332,5.706a2.642,2.642,0,0,0,2.763.026q5.19-2.871,10.386-5.733a2.444,2.444,0,0,0,.955-.9,2.4,2.4,0,0,0,.3-1.22V10.232" style="fill:#659ad2"/><path d="M28.549,23.171a2.126,2.126,0,0,0,.147-.182,2.4,2.4,0,0,0,.3-1.22V10.232a2.387,2.387,0,0,0-.318-1.244c-.036-.059-.089-.105-.13-.16L16,16Z" style="fill:#00599c"/><path d="M28.549,23.171,16,16,3.451,23.171a2.435,2.435,0,0,0,.809.72c2.056,1.141,8.954,4.927,10.332,5.706a2.642,2.642,0,0,0,2.763.026q5.19-2.871,10.386-5.733A2.43,2.43,0,0,0,28.549,23.171Z" style="fill:#004482"/><path d="M19.6,18.02a4.121,4.121,0,1,1-.027-4.087l3.615-2.073A8.309,8.309,0,0,0,7.7,16a8.216,8.216,0,0,0,1.1,4.117A8.319,8.319,0,0,0,23.211,20.1L19.6,18.02" style="fill:#fff"/><polygon points="24.076 15.538 23.15 15.538 23.15 14.617 22.225 14.617 22.225 15.538 21.299 15.538 21.299 16.461 22.225 16.461 22.225 17.381 23.15 17.381 23.15 16.461 24.076 16.461 24.076 15.538" style="fill:#fff"/><polygon points="27.549 15.538 26.623 15.538 26.623 14.617 25.697 14.617 25.697 15.538 24.771 15.538 24.771 16.461 25.697 16.461 25.697 17.381 26.623 17.381 26.623 16.461 27.549 16.461 27.549 15.538" style="fill:#fff"/></svg>' },
        '.cpp': { language: 'cpp', emoji: '<svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg" width="20" height="20"><title>file_type_cpp3</title><path d="M29,10.232a2.387,2.387,0,0,0-.318-1.244,2.451,2.451,0,0,0-.936-.879Q22.552,5.241,17.353,2.376A2.642,2.642,0,0,0,14.59,2.4c-1.378.779-8.275,4.565-10.331,5.706A2.287,2.287,0,0,0,3,10.231V21.77a2.4,2.4,0,0,0,.3,1.22,2.434,2.434,0,0,0,.954.9c2.056,1.141,8.954,4.927,10.332,5.706a2.642,2.642,0,0,0,2.763.026q5.19-2.871,10.386-5.733a2.444,2.444,0,0,0,.955-.9,2.4,2.4,0,0,0,.3-1.22V10.232" style="fill:#659ad2"/><path d="M28.549,23.171a2.126,2.126,0,0,0,.147-.182,2.4,2.4,0,0,0,.3-1.22V10.232a2.387,2.387,0,0,0-.318-1.244c-.036-.059-.089-.105-.13-.16L16,16Z" style="fill:#00599c"/><path d="M28.549,23.171,16,16,3.451,23.171a2.435,2.435,0,0,0,.809.72c2.056,1.141,8.954,4.927,10.332,5.706a2.642,2.642,0,0,0,2.763.026q5.19-2.871,10.386-5.733A2.43,2.43,0,0,0,28.549,23.171Z" style="fill:#004482"/><path d="M19.6,18.02a4.121,4.121,0,1,1-.027-4.087l3.615-2.073A8.309,8.309,0,0,0,7.7,16a8.216,8.216,0,0,0,1.1,4.117A8.319,8.319,0,0,0,23.211,20.1L19.6,18.02" style="fill:#fff"/><polygon points="24.076 15.538 23.15 15.538 23.15 14.617 22.225 14.617 22.225 15.538 21.299 15.538 21.299 16.461 22.225 16.461 22.225 17.381 23.15 17.381 23.15 16.461 24.076 16.461 24.076 15.538" style="fill:#fff"/><polygon points="27.549 15.538 26.623 15.538 26.623 14.617 25.697 14.617 25.697 15.538 24.771 15.538 24.771 16.461 25.697 16.461 25.697 17.381 26.623 17.381 26.623 16.461 27.549 16.461 27.549 15.538" style="fill:#fff"/></svg>' },
        '.cs': { language: 'csharp', emoji: '<svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg" width="20" height="20"><title>file_type_cpp3</title><path d="M29,10.232a2.387,2.387,0,0,0-.318-1.244,2.451,2.451,0,0,0-.936-.879Q22.552,5.241,17.353,2.376A2.642,2.642,0,0,0,14.59,2.4c-1.378.779-8.275,4.565-10.331,5.706A2.287,2.287,0,0,0,3,10.231V21.77a2.4,2.4,0,0,0,.3,1.22,2.434,2.434,0,0,0,.954.9c2.056,1.141,8.954,4.927,10.332,5.706a2.642,2.642,0,0,0,2.763.026q5.19-2.871,10.386-5.733a2.444,2.444,0,0,0,.955-.9,2.4,2.4,0,0,0,.3-1.22V10.232" style="fill:#659ad2"/><path d="M28.549,23.171a2.126,2.126,0,0,0,.147-.182,2.4,2.4,0,0,0,.3-1.22V10.232a2.387,2.387,0,0,0-.318-1.244c-.036-.059-.089-.105-.13-.16L16,16Z" style="fill:#00599c"/><path d="M28.549,23.171,16,16,3.451,23.171a2.435,2.435,0,0,0,.809.72c2.056,1.141,8.954,4.927,10.332,5.706a2.642,2.642,0,0,0,2.763.026q5.19-2.871,10.386-5.733A2.43,2.43,0,0,0,28.549,23.171Z" style="fill:#004482"/><path d="M19.6,18.02a4.121,4.121,0,1,1-.027-4.087l3.615-2.073A8.309,8.309,0,0,0,7.7,16a8.216,8.216,0,0,0,1.1,4.117A8.319,8.319,0,0,0,23.211,20.1L19.6,18.02" style="fill:#fff"/><polygon points="24.076 15.538 23.15 15.538 23.15 14.617 22.225 14.617 22.225 15.538 21.299 15.538 21.299 16.461 22.225 16.461 22.225 17.381 23.15 17.381 23.15 16.461 24.076 16.461 24.076 15.538" style="fill:#fff"/><polygon points="27.549 15.538 26.623 15.538 26.623 14.617 25.697 14.617 25.697 15.538 24.771 15.538 24.771 16.461 25.697 16.461 25.697 17.381 26.623 17.381 26.623 16.461 27.549 16.461 27.549 15.538" style="fill:#fff"/></svg>' },
        '.java': { language: 'java', emoji: '<svg viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg" width="20" height="20"><g id="SVGRepo_bgCarrier" stroke-width="0"/><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round" stroke="#CCCCCC" stroke-width="1.088"> <path d="M16.0497 8.44062C22.6378 3.32607 19.2566 0 19.2566 0C19.7598 5.28738 13.813 6.53583 12.2189 10.1692C11.1312 12.6485 12.9638 14.8193 16.0475 17.5554C15.7749 16.9494 15.3544 16.3606 14.9288 15.7645C13.4769 13.7313 11.9645 11.6132 16.0497 8.44062Z" fill="#E76F00"/> <path d="M17.1015 18.677C17.1015 18.677 19.0835 17.0779 17.5139 15.3008C12.1931 9.27186 23.3333 6.53583 23.3333 6.53583C16.5317 9.8125 17.5471 11.7574 19.2567 14.1202C21.0871 16.6538 17.1015 18.677 17.1015 18.677Z" fill="#E76F00"/> <path d="M22.937 23.4456C29.0423 20.3258 26.2195 17.3278 24.2492 17.7317C23.7662 17.8305 23.5509 17.9162 23.5509 17.9162C23.5509 17.9162 23.7302 17.64 24.0726 17.5204C27.9705 16.1729 30.9682 21.4949 22.8143 23.6028C22.8143 23.6029 22.9088 23.5198 22.937 23.4456Z" fill="#5382A1"/> <path d="M10.233 19.4969C6.41312 18.9953 12.3275 17.6139 12.3275 17.6139C12.3275 17.6139 10.0307 17.4616 7.20592 18.8043C3.86577 20.3932 15.4681 21.1158 21.474 19.5625C22.0984 19.1432 22.9614 18.7798 22.9614 18.7798C22.9614 18.7798 20.5037 19.2114 18.0561 19.4145C15.0612 19.6612 11.8459 19.7093 10.233 19.4969Z" fill="#5382A1"/> <path d="M11.6864 22.4758C9.55624 22.2592 10.951 21.2439 10.951 21.2439C5.43898 23.0429 14.0178 25.083 21.7199 22.8682C20.9012 22.5844 20.3806 22.0653 20.3806 22.0653C16.6163 22.7781 14.441 22.7553 11.6864 22.4758Z" fill="#5382A1"/> <path d="M12.6145 25.6991C10.486 25.4585 11.7295 24.7474 11.7295 24.7474C6.72594 26.1222 14.7729 28.9625 21.1433 26.2777C20.0999 25.8787 19.3528 25.4181 19.3528 25.4181C16.5111 25.9469 15.1931 25.9884 12.6145 25.6991Z" fill="#5382A1"/> <path d="M25.9387 27.3388C25.9387 27.3388 26.8589 28.0844 24.9252 28.6612C21.2481 29.7566 9.62093 30.0874 6.39094 28.7049C5.22984 28.2082 7.40723 27.5189 8.09215 27.3742C8.80646 27.2219 9.21466 27.2503 9.21466 27.2503C7.9234 26.3558 0.868489 29.0067 5.63111 29.7659C18.6195 31.8372 29.3077 28.8331 25.9387 27.3388Z" fill="#5382A1"/> <path d="M28 28.9679C27.7869 31.6947 18.7877 32.2683 12.9274 31.8994C9.10432 31.6583 8.33812 31.0558 8.32691 31.047C11.9859 31.6402 18.1549 31.7482 23.1568 30.8225C27.5903 30.0016 28 28.9679 28 28.9679Z" fill="#5382A1"/> </g><g id="SVGRepo_iconCarrier"> <path d="M16.0497 8.44062C22.6378 3.32607 19.2566 0 19.2566 0C19.7598 5.28738 13.813 6.53583 12.2189 10.1692C11.1312 12.6485 12.9638 14.8193 16.0475 17.5554C15.7749 16.9494 15.3544 16.3606 14.9288 15.7645C13.4769 13.7313 11.9645 11.6132 16.0497 8.44062Z" fill="#E76F00"/> <path d="M17.1015 18.677C17.1015 18.677 19.0835 17.0779 17.5139 15.3008C12.1931 9.27186 23.3333 6.53583 23.3333 6.53583C16.5317 9.8125 17.5471 11.7574 19.2567 14.1202C21.0871 16.6538 17.1015 18.677 17.1015 18.677Z" fill="#E76F00"/> <path d="M22.937 23.4456C29.0423 20.3258 26.2195 17.3278 24.2492 17.7317C23.7662 17.8305 23.5509 17.9162 23.5509 17.9162C23.5509 17.9162 23.7302 17.64 24.0726 17.5204C27.9705 16.1729 30.9682 21.4949 22.8143 23.6028C22.8143 23.6029 22.9088 23.5198 22.937 23.4456Z" fill="#5382A1"/> <path d="M10.233 19.4969C6.41312 18.9953 12.3275 17.6139 12.3275 17.6139C12.3275 17.6139 10.0307 17.4616 7.20592 18.8043C3.86577 20.3932 15.4681 21.1158 21.474 19.5625C22.0984 19.1432 22.9614 18.7798 22.9614 18.7798C22.9614 18.7798 20.5037 19.2114 18.0561 19.4145C15.0612 19.6612 11.8459 19.7093 10.233 19.4969Z" fill="#5382A1"/> <path d="M11.6864 22.4758C9.55624 22.2592 10.951 21.2439 10.951 21.2439C5.43898 23.0429 14.0178 25.083 21.7199 22.8682C20.9012 22.5844 20.3806 22.0653 20.3806 22.0653C16.6163 22.7781 14.441 22.7553 11.6864 22.4758Z" fill="#5382A1"/> <path d="M12.6145 25.6991C10.486 25.4585 11.7295 24.7474 11.7295 24.7474C6.72594 26.1222 14.7729 28.9625 21.1433 26.2777C20.0999 25.8787 19.3528 25.4181 19.3528 25.4181C16.5111 25.9469 15.1931 25.9884 12.6145 25.6991Z" fill="#5382A1"/> <path d="M25.9387 27.3388C25.9387 27.3388 26.8589 28.0844 24.9252 28.6612C21.2481 29.7566 9.62093 30.0874 6.39094 28.7049C5.22984 28.2082 7.40723 27.5189 8.09215 27.3742C8.80646 27.2219 9.21466 27.2503 9.21466 27.2503C7.9234 26.3558 0.868489 29.0067 5.63111 29.7659C18.6195 31.8372 29.3077 28.8331 25.9387 27.3388Z" fill="#5382A1"/> <path d="M28 28.9679C27.7869 31.6947 18.7877 32.2683 12.9274 31.8994C9.10432 31.6583 8.33812 31.0558 8.32691 31.047C11.9859 31.6402 18.1549 31.7482 23.1568 30.8225C27.5903 30.0016 28 28.9679 28 28.9679Z" fill="#5382A1"/> </g></svg>' },
        '.rb': { language: 'ruby', emoji: '<svg viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg" width="20" height="20"><path fill-rule="evenodd" clip-rule="evenodd" d="M22.5941 19.8407L8.8916 27.9998L26.6338 26.7925L28.0003 8.85254L22.5941 19.8407Z" fill="url(#paint0_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M26.6631 26.7806L25.1381 16.2261L20.9844 21.7262L26.6631 26.7806Z" fill="url(#paint1_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M26.6836 26.7803L15.5117 25.9009L8.95117 27.9769L26.6836 26.7803Z" fill="url(#paint2_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M8.96674 27.9796L11.7576 18.811L5.61621 20.1279L8.96674 27.9796Z" fill="url(#paint3_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M27.4176 11.8117L20.4706 6.12207L18.5361 12.3936L27.4176 11.8117Z" fill="url(#paint4_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M24.1684 4.09336L20.0826 6.35755L17.5049 4.06299L24.1684 4.09336Z" fill="url(#paint5_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M4 23.2031L5.7116 20.0729L4.32706 16.3438L4 23.2031Z" fill="url(#paint6_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M4.23535 16.2259L5.62838 20.1883L11.6814 18.8265L18.592 12.3862L20.5422 6.17431L17.4714 4L12.2506 5.95931C10.6057 7.49347 7.41387 10.529 7.29879 10.5861C7.18493 10.6444 5.19109 14.4233 4.23535 16.2259Z" fill="white"/><path d="M11.7227 18.7882L18.592 12.3863L18.5951 12.3765L20.9832 21.7566L11.7227 18.7882Z" fill="url(#paint7_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M9.12619 9.10774C12.6911 5.56325 17.2869 3.46911 19.0506 5.2535C20.8132 7.03789 18.944 11.3744 15.3791 14.9176C11.8141 18.4609 7.27528 20.6705 5.5128 18.8861C3.74911 17.1029 5.56126 12.651 9.12619 9.10774Z" fill="url(#paint8_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M8.9668 27.9755L11.7359 18.7778L20.9323 21.7405C17.6072 24.8671 13.909 27.5103 8.9668 27.9755Z" fill="url(#paint9_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M18.6035 12.3679L20.9644 21.7454C23.742 18.8167 26.2349 15.6682 27.4558 11.7739L18.6035 12.3679Z" fill="url(#paint10_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M27.4317 11.8217C28.3765 8.96229 28.5945 4.86025 24.1392 4.09863L20.4834 6.12354L27.4317 11.8217Z" fill="url(#paint11_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M4 23.162C4.13082 27.8812 7.52617 27.9515 8.97249 27.9929L5.63166 20.1689L4 23.162Z" fill="#9E1209"/><path fill-rule="evenodd" clip-rule="evenodd" d="M18.6172 12.3826C20.7515 13.6981 25.0531 16.3401 25.1403 16.3887C25.2758 16.4652 26.9948 13.4819 27.3849 11.7959L18.6172 12.3826Z" fill="url(#paint12_radial_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M11.7324 18.7778L15.4342 25.9397C17.6231 24.7493 19.3371 23.2989 20.907 21.7453L11.7324 18.7778Z" fill="url(#paint13_radial_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M5.61728 20.1783L5.09277 26.4413C6.08243 27.7969 7.44396 27.9147 8.87211 27.8091C7.83885 25.2303 5.77475 20.0739 5.61728 20.1783Z" fill="url(#paint14_linear_87_8208)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M20.4619 6.1393L27.8159 7.17422C27.4234 5.50644 26.2181 4.43022 24.1637 4.09375L20.4619 6.1393Z" fill="url(#paint15_linear_87_8208)"/><defs><linearGradient id="paint0_linear_87_8208" x1="25.0863" y1="30.1825" x2="20.0019" y2="21.2307" gradientUnits="userSpaceOnUse"><stop stop-color="#FB7655"/><stop offset="0.41" stop-color="#E42B1E"/><stop offset="0.99" stop-color="#990000"/><stop offset="1" stop-color="#990000"/></linearGradient><linearGradient id="paint1_linear_87_8208" x1="27.6086" y1="22.6528" x2="21.0723" y2="18.2786" gradientUnits="userSpaceOnUse"><stop stop-color="#871101"/><stop offset="0.99" stop-color="#911209"/><stop offset="1" stop-color="#911209"/></linearGradient><linearGradient id="paint2_linear_87_8208" x1="22.3878" y1="30.4542" x2="15.8517" y2="26.0802" gradientUnits="userSpaceOnUse"><stop stop-color="#871101"/><stop offset="0.99" stop-color="#911209"/><stop offset="1" stop-color="#911209"/></linearGradient><linearGradient id="paint3_linear_87_8208" x1="8.68769" y1="19.4743" x2="9.70472" y2="26.0657" gradientUnits="userSpaceOnUse"><stop stop-color="white"/><stop offset="0.23" stop-color="#E57252"/><stop offset="0.46" stop-color="#DE3B20"/><stop offset="0.99" stop-color="#A60003"/><stop offset="1" stop-color="#A60003"/></linearGradient><linearGradient id="paint4_linear_87_8208" x1="21.8192" y1="7.10002" x2="22.9409" y2="11.9204" gradientUnits="userSpaceOnUse"><stop stop-color="white"/><stop offset="0.18" stop-color="#E46342"/><stop offset="0.4" stop-color="#C82410"/><stop offset="0.99" stop-color="#A80D00"/><stop offset="1" stop-color="#A80D00"/></linearGradient><linearGradient id="paint5_linear_87_8208" x1="18.4117" y1="5.40177" x2="23.2251" y2="3.00175" gradientUnits="userSpaceOnUse"><stop stop-color="white"/><stop offset="0.54" stop-color="#C81F11"/><stop offset="0.99" stop-color="#BF0905"/><stop offset="1" stop-color="#BF0905"/></linearGradient><linearGradient id="paint6_linear_87_8208" x1="4.47282" y1="17.7935" x2="4.87073" y2="21.7663" gradientUnits="userSpaceOnUse"><stop stop-color="white"/><stop offset="0.31" stop-color="#DE4024"/><stop offset="0.99" stop-color="#BF190B"/><stop offset="1" stop-color="#BF190B"/></linearGradient><linearGradient id="paint7_linear_87_8208" x1="15.6452" y1="13.3187" x2="16.02" y2="20.0464" gradientUnits="userSpaceOnUse"><stop stop-color="white"/><stop offset="0.23" stop-color="#E4714E"/><stop offset="0.56" stop-color="#BE1A0D"/><stop offset="0.99" stop-color="#A80D00"/><stop offset="1" stop-color="#A80D00"/></linearGradient><linearGradient id="paint8_linear_87_8208" x1="1.75216" y1="22.8404" x2="20.4078" y2="3.71053" gradientUnits="userSpaceOnUse"><stop stop-color="#BD0012"/><stop offset="0.07" stop-color="white"/><stop offset="0.17" stop-color="white"/><stop offset="0.27" stop-color="#C82F1C"/><stop offset="0.33" stop-color="#820C01"/><stop offset="0.46" stop-color="#A31601"/><stop offset="0.72" stop-color="#B31301"/><stop offset="0.99" stop-color="#E82609"/><stop offset="1" stop-color="#E82609"/></linearGradient><linearGradient id="paint9_linear_87_8208" x1="16.0015" y1="24.7752" x2="10.3965" y2="23.3957" gradientUnits="userSpaceOnUse"><stop stop-color="#8C0C01"/><stop offset="0.54" stop-color="#990C00"/><stop offset="0.99" stop-color="#A80D0E"/><stop offset="1" stop-color="#A80D0E"/></linearGradient><linearGradient id="paint10_linear_87_8208" x1="25.6251" y1="18.0314" x2="20.635" y2="13.5714" gradientUnits="userSpaceOnUse"><stop stop-color="#7E110B"/><stop offset="0.99" stop-color="#9E0C00"/><stop offset="1" stop-color="#9E0C00"/></linearGradient><linearGradient id="paint11_linear_87_8208" x1="27.4539" y1="9.82314" x2="24.9671" y2="7.17189" gradientUnits="userSpaceOnUse"><stop stop-color="#79130D"/><stop offset="0.99" stop-color="#9E120B"/><stop offset="1" stop-color="#9E120B"/></linearGradient><radialGradient id="paint12_radial_87_8208" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(21.4229 13.6432) scale(6.09995 6.11692)"><stop stop-color="#A80D00"/><stop offset="0.99" stop-color="#7E0E08"/><stop offset="1" stop-color="#7E0E08"/></radialGradient><radialGradient id="paint13_radial_87_8208" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(12.9755 21.7042) scale(8.10906 8.13164)"><stop stop-color="#A30C00"/><stop offset="0.99" stop-color="#800E08"/><stop offset="1" stop-color="#800E08"/></radialGradient><linearGradient id="paint14_linear_87_8208" x1="7.23075" y1="27.9701" x2="5.19975" y2="21.0987" gradientUnits="userSpaceOnUse"><stop stop-color="#8B2114"/><stop offset="0.43" stop-color="#9E100A"/><stop offset="0.99" stop-color="#B3100C"/><stop offset="1" stop-color="#B3100C"/></linearGradient><linearGradient id="paint15_linear_87_8208" x1="22.7321" y1="5.19037" x2="27.2663" y2="7.18628" gradientUnits="userSpaceOnUse"><stop stop-color="#B31000"/><stop offset="0.44" stop-color="#910F08"/><stop offset="0.99" stop-color="#791C12"/><stop offset="1" stop-color="#791C12"/></linearGradient></defs></svg>' },
        '.yaml': { language: 'yaml', emoji: '<svg viewBox="-0.48 -0.48 16.96 16.96" fill="none" xmlns="http://www.w3.org/2000/svg" height="20" width="20"><g id="SVGRepo_bgCarrier" stroke-width="0"/><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round" stroke="#000000" stroke-width="0.8640000000000001"> <path fill-rule="nonzero" clip-rule="nonzero" d="M0.828288 0.135541C1.17426 -0.103975 1.64888 -0.017679 1.8884 0.328288L3.58007 2.77182L5.48344 0.297431C5.74 -0.0360947 6.21836 -0.0984891 6.55189 0.158069C6.88541 0.414627 6.94781 0.892984 6.69125 1.22651L4.30958 4.32268V7.11115C4.30958 7.53194 3.96846 7.87305 3.54767 7.87305C3.12689 7.87305 2.78577 7.53194 2.78577 7.11115V4.30154L0.635541 1.19565C0.396025 0.849685 0.482321 0.375057 0.828288 0.135541ZM8.88099 6.89044e-05C9.18311 6.89044e-05 9.45669 0.178586 9.57837 0.455123L12.372 6.8043C12.5415 7.18945 12.3666 7.63906 11.9815 7.80853C11.5963 7.978 11.1467 7.80315 10.9772 7.418L10.2835 5.84131H7.47847L6.78473 7.418C6.61526 7.80315 6.16565 7.978 5.7805 7.80853C5.39535 7.63906 5.2205 7.18945 5.38997 6.8043L8.18361 0.455123C8.30528 0.178586 8.57886 6.89044e-05 8.88099 6.89044e-05ZM8.14894 4.31751H9.61303L8.88099 2.65377L8.14894 4.31751ZM9.60471 8.66615C9.92856 8.76179 10.1508 9.05918 10.1508 9.39685V15.2381C10.1508 15.6589 9.80971 16 9.38892 16C8.96813 16 8.62702 15.6589 8.62702 15.2381V11.9768L7.23495 14.1282C7.09962 14.3373 6.8706 14.4671 6.62164 14.4757C6.37268 14.4844 6.13523 14.3707 5.98576 14.1714L4.30958 11.9365V15.2381C4.30958 15.6589 3.96846 16 3.54767 16C3.12689 16 2.78577 15.6589 2.78577 15.2381V9.65082C2.78577 9.32288 2.99562 9.03172 3.30674 8.92802C3.61786 8.82431 3.96043 8.93132 4.1572 9.19368L6.5492 12.383L8.74925 8.98295C8.93269 8.69945 9.28086 8.57051 9.60471 8.66615ZM11.9286 8.63495C12.3494 8.63495 12.6905 8.97607 12.6905 9.39685V14.4762H14.7222C15.143 14.4762 15.4841 14.8173 15.4841 15.2381C15.4841 15.6589 15.143 16 14.7222 16H11.9286C11.5078 16 11.1667 15.6589 11.1667 15.2381V9.39685C11.1667 8.97607 11.5078 8.63495 11.9286 8.63495Z" fill="#f6d32d"/> </g><g id="SVGRepo_iconCarrier"> <path fill-rule="nonzero" clip-rule="nonzero" d="M0.828288 0.135541C1.17426 -0.103975 1.64888 -0.017679 1.8884 0.328288L3.58007 2.77182L5.48344 0.297431C5.74 -0.0360947 6.21836 -0.0984891 6.55189 0.158069C6.88541 0.414627 6.94781 0.892984 6.69125 1.22651L4.30958 4.32268V7.11115C4.30958 7.53194 3.96846 7.87305 3.54767 7.87305C3.12689 7.87305 2.78577 7.53194 2.78577 7.11115V4.30154L0.635541 1.19565C0.396025 0.849685 0.482321 0.375057 0.828288 0.135541ZM8.88099 6.89044e-05C9.18311 6.89044e-05 9.45669 0.178586 9.57837 0.455123L12.372 6.8043C12.5415 7.18945 12.3666 7.63906 11.9815 7.80853C11.5963 7.978 11.1467 7.80315 10.9772 7.418L10.2835 5.84131H7.47847L6.78473 7.418C6.61526 7.80315 6.16565 7.978 5.7805 7.80853C5.39535 7.63906 5.2205 7.18945 5.38997 6.8043L8.18361 0.455123C8.30528 0.178586 8.57886 6.89044e-05 8.88099 6.89044e-05ZM8.14894 4.31751H9.61303L8.88099 2.65377L8.14894 4.31751ZM9.60471 8.66615C9.92856 8.76179 10.1508 9.05918 10.1508 9.39685V15.2381C10.1508 15.6589 9.80971 16 9.38892 16C8.96813 16 8.62702 15.6589 8.62702 15.2381V11.9768L7.23495 14.1282C7.09962 14.3373 6.8706 14.4671 6.62164 14.4757C6.37268 14.4844 6.13523 14.3707 5.98576 14.1714L4.30958 11.9365V15.2381C4.30958 15.6589 3.96846 16 3.54767 16C3.12689 16 2.78577 15.6589 2.78577 15.2381V9.65082C2.78577 9.32288 2.99562 9.03172 3.30674 8.92802C3.61786 8.82431 3.96043 8.93132 4.1572 9.19368L6.5492 12.383L8.74925 8.98295C8.93269 8.69945 9.28086 8.57051 9.60471 8.66615ZM11.9286 8.63495C12.3494 8.63495 12.6905 8.97607 12.6905 9.39685V14.4762H14.7222C15.143 14.4762 15.4841 14.8173 15.4841 15.2381C15.4841 15.6589 15.143 16 14.7222 16H11.9286C11.5078 16 11.1667 15.6589 11.1667 15.2381V9.39685C11.1667 8.97607 11.5078 8.63495 11.9286 8.63495Z" fill="#f6d32d"/> </g></svg>' },
        '.yml': { language: 'yaml', emoji: '<svg viewBox="-0.48 -0.48 16.96 16.96" fill="none" xmlns="http://www.w3.org/2000/svg" height="20" width="20"><g id="SVGRepo_bgCarrier" stroke-width="0"/><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round" stroke="#000000" stroke-width="0.8640000000000001"> <path fill-rule="nonzero" clip-rule="nonzero" d="M0.828288 0.135541C1.17426 -0.103975 1.64888 -0.017679 1.8884 0.328288L3.58007 2.77182L5.48344 0.297431C5.74 -0.0360947 6.21836 -0.0984891 6.55189 0.158069C6.88541 0.414627 6.94781 0.892984 6.69125 1.22651L4.30958 4.32268V7.11115C4.30958 7.53194 3.96846 7.87305 3.54767 7.87305C3.12689 7.87305 2.78577 7.53194 2.78577 7.11115V4.30154L0.635541 1.19565C0.396025 0.849685 0.482321 0.375057 0.828288 0.135541ZM8.88099 6.89044e-05C9.18311 6.89044e-05 9.45669 0.178586 9.57837 0.455123L12.372 6.8043C12.5415 7.18945 12.3666 7.63906 11.9815 7.80853C11.5963 7.978 11.1467 7.80315 10.9772 7.418L10.2835 5.84131H7.47847L6.78473 7.418C6.61526 7.80315 6.16565 7.978 5.7805 7.80853C5.39535 7.63906 5.2205 7.18945 5.38997 6.8043L8.18361 0.455123C8.30528 0.178586 8.57886 6.89044e-05 8.88099 6.89044e-05ZM8.14894 4.31751H9.61303L8.88099 2.65377L8.14894 4.31751ZM9.60471 8.66615C9.92856 8.76179 10.1508 9.05918 10.1508 9.39685V15.2381C10.1508 15.6589 9.80971 16 9.38892 16C8.96813 16 8.62702 15.6589 8.62702 15.2381V11.9768L7.23495 14.1282C7.09962 14.3373 6.8706 14.4671 6.62164 14.4757C6.37268 14.4844 6.13523 14.3707 5.98576 14.1714L4.30958 11.9365V15.2381C4.30958 15.6589 3.96846 16 3.54767 16C3.12689 16 2.78577 15.6589 2.78577 15.2381V9.65082C2.78577 9.32288 2.99562 9.03172 3.30674 8.92802C3.61786 8.82431 3.96043 8.93132 4.1572 9.19368L6.5492 12.383L8.74925 8.98295C8.93269 8.69945 9.28086 8.57051 9.60471 8.66615ZM11.9286 8.63495C12.3494 8.63495 12.6905 8.97607 12.6905 9.39685V14.4762H14.7222C15.143 14.4762 15.4841 14.8173 15.4841 15.2381C15.4841 15.6589 15.143 16 14.7222 16H11.9286C11.5078 16 11.1667 15.6589 11.1667 15.2381V9.39685C11.1667 8.97607 11.5078 8.63495 11.9286 8.63495Z" fill="#f6d32d"/> </g><g id="SVGRepo_iconCarrier"> <path fill-rule="nonzero" clip-rule="nonzero" d="M0.828288 0.135541C1.17426 -0.103975 1.64888 -0.017679 1.8884 0.328288L3.58007 2.77182L5.48344 0.297431C5.74 -0.0360947 6.21836 -0.0984891 6.55189 0.158069C6.88541 0.414627 6.94781 0.892984 6.69125 1.22651L4.30958 4.32268V7.11115C4.30958 7.53194 3.96846 7.87305 3.54767 7.87305C3.12689 7.87305 2.78577 7.53194 2.78577 7.11115V4.30154L0.635541 1.19565C0.396025 0.849685 0.482321 0.375057 0.828288 0.135541ZM8.88099 6.89044e-05C9.18311 6.89044e-05 9.45669 0.178586 9.57837 0.455123L12.372 6.8043C12.5415 7.18945 12.3666 7.63906 11.9815 7.80853C11.5963 7.978 11.1467 7.80315 10.9772 7.418L10.2835 5.84131H7.47847L6.78473 7.418C6.61526 7.80315 6.16565 7.978 5.7805 7.80853C5.39535 7.63906 5.2205 7.18945 5.38997 6.8043L8.18361 0.455123C8.30528 0.178586 8.57886 6.89044e-05 8.88099 6.89044e-05ZM8.14894 4.31751H9.61303L8.88099 2.65377L8.14894 4.31751ZM9.60471 8.66615C9.92856 8.76179 10.1508 9.05918 10.1508 9.39685V15.2381C10.1508 15.6589 9.80971 16 9.38892 16C8.96813 16 8.62702 15.6589 8.62702 15.2381V11.9768L7.23495 14.1282C7.09962 14.3373 6.8706 14.4671 6.62164 14.4757C6.37268 14.4844 6.13523 14.3707 5.98576 14.1714L4.30958 11.9365V15.2381C4.30958 15.6589 3.96846 16 3.54767 16C3.12689 16 2.78577 15.6589 2.78577 15.2381V9.65082C2.78577 9.32288 2.99562 9.03172 3.30674 8.92802C3.61786 8.82431 3.96043 8.93132 4.1572 9.19368L6.5492 12.383L8.74925 8.98295C8.93269 8.69945 9.28086 8.57051 9.60471 8.66615ZM11.9286 8.63495C12.3494 8.63495 12.6905 8.97607 12.6905 9.39685V14.4762H14.7222C15.143 14.4762 15.4841 14.8173 15.4841 15.2381C15.4841 15.6589 15.143 16 14.7222 16H11.9286C11.5078 16 11.1667 15.6589 11.1667 15.2381V9.39685C11.1667 8.97607 11.5078 8.63495 11.9286 8.63495Z" fill="#f6d32d"/> </g></svg>' },
        '.jpg': { language: 'image', emoji: '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20" height="20"><defs><path id="image-a" d="M4,4 C2.8954305,4 2,3.1045695 2,2 C2,0.8954305 2.8954305,0 4,0 C5.1045695,0 6,0.8954305 6,2 C6,3.1045695 5.1045695,4 4,4 Z M0.497558594,15 L4.07592773,10.7578125 L6.02026367,12.2731934 L13.4494629,2.51928711 L16,5.45703125 L16,15 L0.497558594,15 Z"/><path id="image-c" d="M18,6.97348874 L18,2 L2,2 L2,15.5476712 L6.04883416,10.4166727 C6.41808601,9.94872797 7.11213264,9.90569713 7.53635945,10.3244463 L9.54496213,12.3071135 L14.8746293,5.31817463 C15.2514017,4.82410259 15.9827874,4.78961411 16.4043805,5.24603924 L18,6.97348874 Z M18,9.92107486 L15.7430352,7.47763974 L10.4462935,14.4234025 C10.0808144,14.9026653 9.37757149,14.9521101 8.9486259,14.5287032 L6.92665827,12.5328435 L2.61256422,18 L18,18 L18,9.92107486 Z M2,0 L18,0 C19.1045695,0 20,0.8954305 20,2 L20,18 C20,19.1045695 19.1045695,20 18,20 L2,20 C0.8954305,20 0,19.1045695 0,18 L0,2 C0,0.8954305 0.8954305,0 2,0 Z M7,9 C5.34314575,9 4,7.65685425 4,6 C4,4.34314575 5.34314575,3 7,3 C8.65685425,3 10,4.34314575 10,6 C10,7.65685425 8.65685425,9 7,9 Z M7,7 C7.55228475,7 8,6.55228475 8,6 C8,5.44771525 7.55228475,5 7,5 C6.44771525,5 6,5.44771525 6,6 C6,6.55228475 6.44771525,7 7,7 Z"/></defs><g fill="none" fill-rule="evenodd" transform="translate(2 2)"><g transform="translate(3 4)"><mask id="image-b" fill="#ffffff"><use xlink:href="#image-a"/></mask><use fill="#D8D8D8" xlink:href="#image-a"/><g fill="#FFA0A0" mask="url(#image-b)"><rect width="24" height="24" transform="translate(-5 -6)"/></g></g><mask id="image-d" fill="#ffffff"><use xlink:href="#image-c"/></mask><use fill="#000000" fill-rule="nonzero" xlink:href="#image-c"/><g fill="#7600FF" mask="url(#image-d)"><rect width="24" height="24" transform="translate(-2 -2)"/></g></g></svg>' },
        '.jpeg': { language: 'image', emoji: '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20" height="20"><defs><path id="image-a" d="M4,4 C2.8954305,4 2,3.1045695 2,2 C2,0.8954305 2.8954305,0 4,0 C5.1045695,0 6,0.8954305 6,2 C6,3.1045695 5.1045695,4 4,4 Z M0.497558594,15 L4.07592773,10.7578125 L6.02026367,12.2731934 L13.4494629,2.51928711 L16,5.45703125 L16,15 L0.497558594,15 Z"/><path id="image-c" d="M18,6.97348874 L18,2 L2,2 L2,15.5476712 L6.04883416,10.4166727 C6.41808601,9.94872797 7.11213264,9.90569713 7.53635945,10.3244463 L9.54496213,12.3071135 L14.8746293,5.31817463 C15.2514017,4.82410259 15.9827874,4.78961411 16.4043805,5.24603924 L18,6.97348874 Z M18,9.92107486 L15.7430352,7.47763974 L10.4462935,14.4234025 C10.0808144,14.9026653 9.37757149,14.9521101 8.9486259,14.5287032 L6.92665827,12.5328435 L2.61256422,18 L18,18 L18,9.92107486 Z M2,0 L18,0 C19.1045695,0 20,0.8954305 20,2 L20,18 C20,19.1045695 19.1045695,20 18,20 L2,20 C0.8954305,20 0,19.1045695 0,18 L0,2 C0,0.8954305 0.8954305,0 2,0 Z M7,9 C5.34314575,9 4,7.65685425 4,6 C4,4.34314575 5.34314575,3 7,3 C8.65685425,3 10,4.34314575 10,6 C10,7.65685425 8.65685425,9 7,9 Z M7,7 C7.55228475,7 8,6.55228475 8,6 C8,5.44771525 7.55228475,5 7,5 C6.44771525,5 6,5.44771525 6,6 C6,6.55228475 6.44771525,7 7,7 Z"/></defs><g fill="none" fill-rule="evenodd" transform="translate(2 2)"><g transform="translate(3 4)"><mask id="image-b" fill="#ffffff"><use xlink:href="#image-a"/></mask><use fill="#D8D8D8" xlink:href="#image-a"/><g fill="#FFA0A0" mask="url(#image-b)"><rect width="24" height="24" transform="translate(-5 -6)"/></g></g><mask id="image-d" fill="#ffffff"><use xlink:href="#image-c"/></mask><use fill="#000000" fill-rule="nonzero" xlink:href="#image-c"/><g fill="#7600FF" mask="url(#image-d)"><rect width="24" height="24" transform="translate(-2 -2)"/></g></g></svg>' },
        '.png': { language: 'image', emoji: '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20" height="20"><defs><path id="image-a" d="M4,4 C2.8954305,4 2,3.1045695 2,2 C2,0.8954305 2.8954305,0 4,0 C5.1045695,0 6,0.8954305 6,2 C6,3.1045695 5.1045695,4 4,4 Z M0.497558594,15 L4.07592773,10.7578125 L6.02026367,12.2731934 L13.4494629,2.51928711 L16,5.45703125 L16,15 L0.497558594,15 Z"/><path id="image-c" d="M18,6.97348874 L18,2 L2,2 L2,15.5476712 L6.04883416,10.4166727 C6.41808601,9.94872797 7.11213264,9.90569713 7.53635945,10.3244463 L9.54496213,12.3071135 L14.8746293,5.31817463 C15.2514017,4.82410259 15.9827874,4.78961411 16.4043805,5.24603924 L18,6.97348874 Z M18,9.92107486 L15.7430352,7.47763974 L10.4462935,14.4234025 C10.0808144,14.9026653 9.37757149,14.9521101 8.9486259,14.5287032 L6.92665827,12.5328435 L2.61256422,18 L18,18 L18,9.92107486 Z M2,0 L18,0 C19.1045695,0 20,0.8954305 20,2 L20,18 C20,19.1045695 19.1045695,20 18,20 L2,20 C0.8954305,20 0,19.1045695 0,18 L0,2 C0,0.8954305 0.8954305,0 2,0 Z M7,9 C5.34314575,9 4,7.65685425 4,6 C4,4.34314575 5.34314575,3 7,3 C8.65685425,3 10,4.34314575 10,6 C10,7.65685425 8.65685425,9 7,9 Z M7,7 C7.55228475,7 8,6.55228475 8,6 C8,5.44771525 7.55228475,5 7,5 C6.44771525,5 6,5.44771525 6,6 C6,6.55228475 6.44771525,7 7,7 Z"/></defs><g fill="none" fill-rule="evenodd" transform="translate(2 2)"><g transform="translate(3 4)"><mask id="image-b" fill="#ffffff"><use xlink:href="#image-a"/></mask><use fill="#D8D8D8" xlink:href="#image-a"/><g fill="#FFA0A0" mask="url(#image-b)"><rect width="24" height="24" transform="translate(-5 -6)"/></g></g><mask id="image-d" fill="#ffffff"><use xlink:href="#image-c"/></mask><use fill="#000000" fill-rule="nonzero" xlink:href="#image-c"/><g fill="#7600FF" mask="url(#image-d)"><rect width="24" height="24" transform="translate(-2 -2)"/></g></g></svg>' },
        '.gif': { language: 'image', emoji: '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20" height="20"><defs><path id="image-a" d="M4,4 C2.8954305,4 2,3.1045695 2,2 C2,0.8954305 2.8954305,0 4,0 C5.1045695,0 6,0.8954305 6,2 C6,3.1045695 5.1045695,4 4,4 Z M0.497558594,15 L4.07592773,10.7578125 L6.02026367,12.2731934 L13.4494629,2.51928711 L16,5.45703125 L16,15 L0.497558594,15 Z"/><path id="image-c" d="M18,6.97348874 L18,2 L2,2 L2,15.5476712 L6.04883416,10.4166727 C6.41808601,9.94872797 7.11213264,9.90569713 7.53635945,10.3244463 L9.54496213,12.3071135 L14.8746293,5.31817463 C15.2514017,4.82410259 15.9827874,4.78961411 16.4043805,5.24603924 L18,6.97348874 Z M18,9.92107486 L15.7430352,7.47763974 L10.4462935,14.4234025 C10.0808144,14.9026653 9.37757149,14.9521101 8.9486259,14.5287032 L6.92665827,12.5328435 L2.61256422,18 L18,18 L18,9.92107486 Z M2,0 L18,0 C19.1045695,0 20,0.8954305 20,2 L20,18 C20,19.1045695 19.1045695,20 18,20 L2,20 C0.8954305,20 0,19.1045695 0,18 L0,2 C0,0.8954305 0.8954305,0 2,0 Z M7,9 C5.34314575,9 4,7.65685425 4,6 C4,4.34314575 5.34314575,3 7,3 C8.65685425,3 10,4.34314575 10,6 C10,7.65685425 8.65685425,9 7,9 Z M7,7 C7.55228475,7 8,6.55228475 8,6 C8,5.44771525 7.55228475,5 7,5 C6.44771525,5 6,5.44771525 6,6 C6,6.55228475 6.44771525,7 7,7 Z"/></defs><g fill="none" fill-rule="evenodd" transform="translate(2 2)"><g transform="translate(3 4)"><mask id="image-b" fill="#ffffff"><use xlink:href="#image-a"/></mask><use fill="#D8D8D8" xlink:href="#image-a"/><g fill="#FFA0A0" mask="url(#image-b)"><rect width="24" height="24" transform="translate(-5 -6)"/></g></g><mask id="image-d" fill="#ffffff"><use xlink:href="#image-c"/></mask><use fill="#000000" fill-rule="nonzero" xlink:href="#image-c"/><g fill="#7600FF" mask="url(#image-d)"><rect width="24" height="24" transform="translate(-2 -2)"/></g></g></svg>' },
        '.bmp': { language: 'image', emoji: '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20" height="20"><defs><path id="image-a" d="M4,4 C2.8954305,4 2,3.1045695 2,2 C2,0.8954305 2.8954305,0 4,0 C5.1045695,0 6,0.8954305 6,2 C6,3.1045695 5.1045695,4 4,4 Z M0.497558594,15 L4.07592773,10.7578125 L6.02026367,12.2731934 L13.4494629,2.51928711 L16,5.45703125 L16,15 L0.497558594,15 Z"/><path id="image-c" d="M18,6.97348874 L18,2 L2,2 L2,15.5476712 L6.04883416,10.4166727 C6.41808601,9.94872797 7.11213264,9.90569713 7.53635945,10.3244463 L9.54496213,12.3071135 L14.8746293,5.31817463 C15.2514017,4.82410259 15.9827874,4.78961411 16.4043805,5.24603924 L18,6.97348874 Z M18,9.92107486 L15.7430352,7.47763974 L10.4462935,14.4234025 C10.0808144,14.9026653 9.37757149,14.9521101 8.9486259,14.5287032 L6.92665827,12.5328435 L2.61256422,18 L18,18 L18,9.92107486 Z M2,0 L18,0 C19.1045695,0 20,0.8954305 20,2 L20,18 C20,19.1045695 19.1045695,20 18,20 L2,20 C0.8954305,20 0,19.1045695 0,18 L0,2 C0,0.8954305 0.8954305,0 2,0 Z M7,9 C5.34314575,9 4,7.65685425 4,6 C4,4.34314575 5.34314575,3 7,3 C8.65685425,3 10,4.34314575 10,6 C10,7.65685425 8.65685425,9 7,9 Z M7,7 C7.55228475,7 8,6.55228475 8,6 C8,5.44771525 7.55228475,5 7,5 C6.44771525,5 6,5.44771525 6,6 C6,6.55228475 6.44771525,7 7,7 Z"/></defs><g fill="none" fill-rule="evenodd" transform="translate(2 2)"><g transform="translate(3 4)"><mask id="image-b" fill="#ffffff"><use xlink:href="#image-a"/></mask><use fill="#D8D8D8" xlink:href="#image-a"/><g fill="#FFA0A0" mask="url(#image-b)"><rect width="24" height="24" transform="translate(-5 -6)"/></g></g><mask id="image-d" fill="#ffffff"><use xlink:href="#image-c"/></mask><use fill="#000000" fill-rule="nonzero" xlink:href="#image-c"/><g fill="#7600FF" mask="url(#image-d)"><rect width="24" height="24" transform="translate(-2 -2)"/></g></g></svg>' },
        '.svg': { language: 'image', emoji: '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20" height="20"><defs><path id="image-a" d="M4,4 C2.8954305,4 2,3.1045695 2,2 C2,0.8954305 2.8954305,0 4,0 C5.1045695,0 6,0.8954305 6,2 C6,3.1045695 5.1045695,4 4,4 Z M0.497558594,15 L4.07592773,10.7578125 L6.02026367,12.2731934 L13.4494629,2.51928711 L16,5.45703125 L16,15 L0.497558594,15 Z"/><path id="image-c" d="M18,6.97348874 L18,2 L2,2 L2,15.5476712 L6.04883416,10.4166727 C6.41808601,9.94872797 7.11213264,9.90569713 7.53635945,10.3244463 L9.54496213,12.3071135 L14.8746293,5.31817463 C15.2514017,4.82410259 15.9827874,4.78961411 16.4043805,5.24603924 L18,6.97348874 Z M18,9.92107486 L15.7430352,7.47763974 L10.4462935,14.4234025 C10.0808144,14.9026653 9.37757149,14.9521101 8.9486259,14.5287032 L6.92665827,12.5328435 L2.61256422,18 L18,18 L18,9.92107486 Z M2,0 L18,0 C19.1045695,0 20,0.8954305 20,2 L20,18 C20,19.1045695 19.1045695,20 18,20 L2,20 C0.8954305,20 0,19.1045695 0,18 L0,2 C0,0.8954305 0.8954305,0 2,0 Z M7,9 C5.34314575,9 4,7.65685425 4,6 C4,4.34314575 5.34314575,3 7,3 C8.65685425,3 10,4.34314575 10,6 C10,7.65685425 8.65685425,9 7,9 Z M7,7 C7.55228475,7 8,6.55228475 8,6 C8,5.44771525 7.55228475,5 7,5 C6.44771525,5 6,5.44771525 6,6 C6,6.55228475 6.44771525,7 7,7 Z"/></defs><g fill="none" fill-rule="evenodd" transform="translate(2 2)"><g transform="translate(3 4)"><mask id="image-b" fill="#ffffff"><use xlink:href="#image-a"/></mask><use fill="#D8D8D8" xlink:href="#image-a"/><g fill="#FFA0A0" mask="url(#image-b)"><rect width="24" height="24" transform="translate(-5 -6)"/></g></g><mask id="image-d" fill="#ffffff"><use xlink:href="#image-c"/></mask><use fill="#000000" fill-rule="nonzero" xlink:href="#image-c"/><g fill="#7600FF" mask="url(#image-d)"><rect width="24" height="24" transform="translate(-2 -2)"/></g></g></svg>' }
    };
    // If it's a directory, return the folder emoji
    if (isDirectory) {
        return { language: 'directory', emoji: '<svg viewBox="0 0 1024 1024" class="icon" version="1.1" xmlns="http://www.w3.org/2000/svg" width="20px" height="20px"><path d="M853.333333 256H469.333333l-85.333333-85.333333H170.666667c-46.933333 0-85.333333 38.4-85.333334 85.333333v170.666667h853.333334v-85.333334c0-46.933333-38.4-85.333333-85.333334-85.333333z" fill="#FFA000"/><path d="M853.333333 256H170.666667c-46.933333 0-85.333333 38.4-85.333334 85.333333v426.666667c0 46.933333 38.4 85.333333 85.333334 85.333333h682.666666c46.933333 0 85.333333-38.4 85.333334-85.333333V341.333333c0-46.933333-38.4-85.333333-85.333334-85.333333z" fill="#FFCA28"/></svg>' };
    }

    return languageMap[ext.toLowerCase()] || { language: 'plaintext', emoji: '<svg fill="#ffffff" viewBox="0 0 56 56" xmlns="http://www.w3.org/2000/svg" stroke="#ffffff" stroke-width="0.00056" width="20" height="20"><g id="SVGRepo_bgCarrier" stroke-width="0"/><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round" stroke="#000000" stroke-width="1.9040000000000004"><path d="M 15.5547 53.125 L 40.4453 53.125 C 45.2969 53.125 47.7109 50.6875 47.7109 45.7890 L 47.7109 10.2344 C 47.7109 5.3594 45.2969 2.8750 40.4453 2.8750 L 15.5547 2.8750 C 10.7266 2.8750 8.2891 5.3594 8.2891 10.2344 L 8.2891 45.7890 C 8.2891 50.6875 10.7266 53.125 15.5547 53.125 Z M 15.7422 49.3515 C 13.3281 49.3515 12.0625 48.0625 12.0625 45.7187 L 12.0625 10.3047 C 12.0625 7.9844 13.3281 6.6484 15.7656 6.6484 L 40.2578 6.6484 C 42.6953 6.6484 43.9375 7.9609 43.9375 10.3047 L 43.9375 45.7187 C 43.9375 48.0625 42.6953 49.3515 40.2813 49.3515 Z M 19.1406 16.4453 L 36.9062 16.4453 C 37.7266 16.4453 38.3594 15.7891 38.3594 14.9687 C 38.3594 14.1718 37.7266 13.5625 36.9062 13.5625 L 19.1406 13.5625 C 18.2734 13.5625 17.6640 14.1718 17.6640 14.9687 C 17.6640 15.7891 18.2734 16.4453 19.1406 16.4453 Z M 19.1406 24.625 L 36.9062 24.625 C 37.7266 24.625 38.3594 23.9687 38.3594 23.1484 C 38.3594 22.3515 37.7266 21.7422 36.9062 21.7422 L 19.1406 21.7422 C 18.2734 21.7422 17.6640 22.3515 17.6640 23.1484 C 17.6640 23.9687 18.2734 24.625 19.1406 24.625 Z M 19.1406 32.8047 L 27.5547 32.8047 C 28.375 32.8047 29.0078 32.1718 29.0078 31.3750 C 29.0078 30.5547 28.375 29.9218 27.5547 29.9218 L 19.1406 29.9218 C 18.2734 29.9218 17.6640 30.5547 17.6640 31.3750 C 17.6640 32.1718 18.2734 32.8047 19.1406 32.8047 Z"/></g><g id="SVGRepo_iconCarrier"><path d="M 15.5547 53.125 L 40.4453 53.125 C 45.2969 53.125 47.7109 50.6875 47.7109 45.7890 L 47.7109 10.2344 C 47.7109 5.3594 45.2969 2.8750 40.4453 2.8750 L 15.5547 2.8750 C 10.7266 2.8750 8.2891 5.3594 8.2891 10.2344 L 8.2891 45.7890 C 8.2891 50.6875 10.7266 53.125 15.5547 53.125 Z M 15.7422 49.3515 C 13.3281 49.3515 12.0625 48.0625 12.0625 45.7187 L 12.0625 10.3047 C 12.0625 7.9844 13.3281 6.6484 15.7656 6.6484 L 40.2578 6.6484 C 42.6953 6.6484 43.9375 7.9609 43.9375 10.3047 L 43.9375 45.7187 C 43.9375 48.0625 42.6953 49.3515 40.2813 49.3515 Z M 19.1406 16.4453 L 36.9062 16.4453 C 37.7266 16.4453 38.3594 15.7891 38.3594 14.9687 C 38.3594 14.1718 37.7266 13.5625 36.9062 13.5625 L 19.1406 13.5625 C 18.2734 13.5625 17.6640 14.1718 17.6640 14.9687 C 17.6640 15.7891 18.2734 16.4453 19.1406 16.4453 Z M 19.1406 24.625 L 36.9062 24.625 C 37.7266 24.625 38.3594 23.9687 38.3594 23.1484 C 38.3594 22.3515 37.7266 21.7422 36.9062 21.7422 L 19.1406 21.7422 C 18.2734 21.7422 17.6640 22.3515 17.6640 23.1484 C 17.6640 23.9687 18.2734 24.625 19.1406 24.625 Z M 19.1406 32.8047 L 27.5547 32.8047 C 28.375 32.8047 29.0078 32.1718 29.0078 31.3750 C 29.0078 30.5547 28.375 29.9218 27.5547 29.9218 L 19.1406 29.9218 C 18.2734 29.9218 17.6640 30.5547 17.6640 31.3750 C 17.6640 32.1718 18.2734 32.8047 19.1406 32.8047 Z"/></g></svg>' };
}

const DEFAULT_FONT_SIZE = 12;
const DEFAULT_LINE_HEIGHT = 1.2;

document.getElementById('set-editor-settings').addEventListener('click', () => {
    const modal = document.getElementById('editor-settings-modal');
    const savedFontSize = localStorage.getItem('fontSize') || DEFAULT_FONT_SIZE;
    const savedLineHeight = localStorage.getItem('lineHeight') || DEFAULT_LINE_HEIGHT;

    // Set the saved values in the modal inputs
    document.getElementById('font-size-select').value = savedFontSize;
    document.getElementById('line-height-select').value = savedLineHeight;

    modal.style.display = 'flex';
});

document.getElementById('cancel-editor-settings').addEventListener('click', () => {
    document.getElementById('editor-settings-modal').style.display = 'none';
});

document.getElementById('save-editor-settings').addEventListener('click', () => {
    const fontSize = document.getElementById('font-size-select').value;
    const lineHeight = document.getElementById('line-height-select').value;

    localStorage.setItem('fontSize', fontSize);
    localStorage.setItem('lineHeight', lineHeight);

    editor.updateOptions({ fontSize: parseInt(fontSize), lineHeight: parseFloat(lineHeight) });

    showToast('Editor settings saved successfully!');
    document.getElementById('editor-settings-modal').style.display = 'none';
});

// Close modal when clicking outside
document.getElementById('editor-settings-modal').addEventListener('click', (e) => {
    if (e.target.id === 'editor-settings-modal') {
        e.target.style.display = 'none';
    }
});

async function loadThemes() {
    const themesFilePath = path.join(__dirname, 'themes.css'); // Adjust the path based on your app structure
    const cssContent = fs.readFileSync(themesFilePath, 'utf8');

    // Use a regex to find theme names
    const themeRegex = /body\.(\w+)-theme\s*{([^}]*)}/g;
    let match;
    const themes = [];

    while ((match = themeRegex.exec(cssContent)) !== null) {
        const themeName = match[1];
        const themeVariables = match[2]
            .trim()
            .split(';')
            .map(line => line.split(':').map(item => item.trim()))
            .filter(item => item.length === 2)
            .reduce((acc, [key, value]) => {
                acc[key] = value;
                return acc;
            }, {});

        themes.push({ name: themeName, variables: themeVariables });
    }
    const themeMenu = document.getElementById('theme-menu');

    themes.forEach(theme => {
        const themeOption = document.createElement('div');
        themeOption.className = 'theme-option menu-option';
        themeOption.id = `set-theme-${theme.name}`;
        themeOption.innerHTML = `${theme.name.charAt(0).toUpperCase() + theme.name.slice(1)} <span class="theme-check">&#10003;</span>`;

        themeOption.addEventListener('click', () => {
            // Set active class and apply theme
            document.body.classList.remove(...themes.map(t => `${t.name}-theme`));
            document.body.classList.add(`${theme.name}-theme`);
            localStorage.setItem('theme', theme.name);
            updateEditorTheme();

            // Update active theme option
            themes.forEach(t => {
                document.getElementById(`set-theme-${t.name}`).classList.remove('active');
            });
            themeOption.classList.add('active');
        });

        themeMenu.appendChild(themeOption);
        const savedTheme = localStorage.getItem('theme');
        // Set active class if it's the saved theme
        if (savedTheme === theme.name) {
            themeOption.classList.add('active');
            document.body.classList.add(`${theme.name}-theme`);
        }
    });
    return themes;
}

// Get app from electron remote
const app = electron.remote.app;

// Update the loader configuration
require.config({
    paths: {
        'vs': app.isPackaged
            ? path.join(process.resourcesPath, 'public/vs')
            : 'public/vs'
    }
});

function updateEditorTheme() {
    // Get computed styles from the body element
    const computedStyle = window.getComputedStyle(document.body);
    let themestyle = computedStyle.getPropertyValue('--themestyle').trim();

    // Create a custom theme based on current CSS variables
    monaco.editor.defineTheme('customTheme', {
        base: themestyle, // or 'vs' for light theme
        inherit: true,
        rules: [
            // You can add specific token rules here if needed
        ],
        colors: {
            'editor.background': computedStyle.getPropertyValue('--background-color').trim(),
            'editor.foreground': computedStyle.getPropertyValue('--text-color').trim(),
            'editorLineNumber.foreground': computedStyle.getPropertyValue('--muted-color').trim(),
            'editorLineNumber.activeForeground': computedStyle.getPropertyValue('--text-color').trim(),
            'editor.selectionBackground': computedStyle.getPropertyValue('--menu-hover').trim(),
            'editor.selectionHighlightBackground': computedStyle.getPropertyValue('--menu-hover').trim() + '50', // 50 for opacity
            'editor.lineHighlightBackground': computedStyle.getPropertyValue('--menu-hover').trim() + '30',
            'editor.lineHighlightBorder': computedStyle.getPropertyValue('--menu-hover').trim() + '00',
            'scrollbarSlider.background': computedStyle.getPropertyValue('--scrollbar1').trim(),
            'scrollbarSlider.hoverBackground': computedStyle.getPropertyValue('--scrollbarhover').trim(),
            'scrollbarSlider.activeBackground': computedStyle.getPropertyValue('--scrollbarhover').trim(),
            'minimap.background': computedStyle.getPropertyValue('--background-color').trim(),
            'minimap.selectionHighlight': computedStyle.getPropertyValue('--menu-hover').trim(),
        }
    });

    // Retrieve and apply saved editor settings
    const savedFontSize = parseInt(localStorage.getItem('fontSize') || DEFAULT_FONT_SIZE);
    const savedLineHeight = parseFloat(localStorage.getItem('lineHeight') || DEFAULT_LINE_HEIGHT);

    editor.updateOptions({
        fontSize: savedFontSize,
        lineHeight: savedLineHeight
    });

    // Apply the theme to the editor
    monaco.editor.setTheme('customTheme');
}
const savedTheme = localStorage.getItem('theme');
const savedFontSize = localStorage.getItem('fontSize') || DEFAULT_FONT_SIZE;
const savedLineHeight = localStorage.getItem('lineHeight') || DEFAULT_LINE_HEIGHT;
// Load theme from localStorage on startup
window.addEventListener('DOMContentLoaded', async () => {
    const sidebarVisible = localStorage.getItem('sidebarVisible');
    if (sidebarVisible === 'false') {
        document.getElementById('sidebar').style.display = 'none';
        document.getElementById('side-bar').style.display = 'none';
        document.getElementById('sidebar-tick').style.display = 'none'; // Hide tick for the sidebar
    } else {
        document.getElementById('sidebar').style.display = 'flex';
        document.getElementById('side-bar').style.display = 'flex';
        document.getElementById('sidebar-tick').style.display = 'inline'; // Show tick for the sidebar
    }
    // Load themes dynamically
    try {
        const themes = await loadThemes();
    } catch (error) {
        alert(error);
    }

    const themeMenu = document.getElementById('theme-menu');
    loadInstalledExtensions();

    themes.forEach(theme => {
        const themeOption = document.createElement('div');
        themeOption.className = 'theme-option menu-option';
        themeOption.id = `set-theme-${theme.name}`;
        themeOption.innerHTML = `${theme.name.charAt(0).toUpperCase() + theme.name.slice(1)} <span class="theme-check">&#10003;</span>`;

        themeOption.addEventListener('click', () => {
            document.body.classList.remove(...themes.map(t => `${t.name}-theme`));
            document.body.classList.add(`${theme.name}-theme`);
            localStorage.setItem('theme', theme.name);
            updateEditorTheme();

            // Update active theme option
            themes.forEach(t => {
                document.getElementById(`set-theme-${t.name}`).classList.remove('active');
            });
            themeOption.classList.add('active');
        });

        themeMenu.appendChild(themeOption);

        // Set active class if it's the saved theme
        if (savedTheme === theme.name) {
            themeOption.classList.add('active');
            document.body.classList.add(`${theme.name}-theme`);
        }
    });

    // Load the default theme if none is saved
    if (!savedTheme) {
        document.body.classList.add('dark-theme'); // Default to dark if no theme set
    }

    // Update the editor theme for the first load
    updateEditorTheme();
});

// Function to load installed extensions
function loadInstalledExtensions() {
    try{
    const installedExtensions = JSON.parse(localStorage.getItem('installedExtensions')) || [];
    installedExtensions.forEach(extension => {

        // Check if there is any script to execute
        if (extension.script) {
            try {
                // Use eval to run the script
                eval(extension.script);
            } catch (error) {
                alert(`Error executing script for ${extension.name}:`+ error);
            }
        }
    });
    }catch(err){alert(err)}
}

// Add this at the top level, before require.config
let currentSearchController = null;

let currentWorkingDirectory = process.cwd();

require(['vs/editor/editor.main'], function () {
    // Add these variable declarations at the top
    let completionTimeout = null;
    let inlineDecoration = [];
    let isCompletionActive = false;

    // Show spinner during initialization
    showSpinner('Initializing editor...');

    let tabs = [];
    let activeTab = null;
    let currentPath = process.cwd();
    let folderWatcher = null;
    let lastFolderContents = new Set();

    // Use the globally stored modules
    const fs = window.electronFS;
    const path = window.electronPath;
    const remote = window.electronRemote;

    // Add IPC listener here, after variables are defined
    electron.ipcRenderer.on('open-file', (event, filePath) => {
        if (filePath) {
            openFile(filePath);
        }
    });

    // Add keyboard shortcut handling here
    document.addEventListener('keydown', async (e) => {
        const ctrlPressed = process.platform === 'darwin' ? e.metaKey : e.ctrlKey;
        if (ctrlPressed && e.shiftKey && e.key.toLowerCase() === 'f') {
            e.preventDefault();
            document.getElementById('search-icon').click();
            document.getElementById('search-input').focus();
        }
        if (ctrlPressed) {
            switch (e.key.toLowerCase()) {
                case 'o':
                    e.preventDefault();
                    const result = await remote.dialog.showOpenDialog({
                        properties: ['openFile'],
                        filters: [{ name: 'All Files', extensions: ['*'] }]
                    });

                    if (!result.canceled && result.filePaths.length > 0) {
                        openFile(result.filePaths[0]);
                    }
                    break;

                case 's':
                    e.preventDefault();
                    if (activeTab.path.includes(':old-') || activeTab.isImage) {
                        showToast('Cant save');
                        break; // Prevent saving
                    }
                    if (activeTab) {  // Ensure it's not an image tab
                        if (activeTab.path === 'untitled') {
                            const result = await remote.dialog.showSaveDialog({
                                defaultPath: currentPath,
                                filters: [{ name: 'All Files', extensions: ['*'] }]
                            });

                            if (!result.canceled && result.filePath) {
                                const content = editor.getValue();
                                fs.writeFileSync(result.filePath, content, 'utf-8');
                                activeTab.path = result.filePath;
                                activeTab.saved = true;
                                const language = getLanguageFromExtension(path.extname(result.filePath));
                                activeTab.language = language;
                                activeTab.model.dispose();
                                activeTab.model = monaco.editor.createModel(content, language);
                                editor.setModel(activeTab.model);
                                renderTabs();
                                saveState();
                                showToast('File saved successfully!');
                            }
                        } else {
                            const content = editor.getValue();
                            fs.writeFileSync(activeTab.path, content, 'utf-8');
                            activeTab.saved = true;
                            renderTabs();
                            saveState();
                            showToast('File saved successfully!');
                        }
                    }
                    break;
            }
        }
    });

    // First define the triggerCompletion function
    async function triggerCompletion(editor) {
        const model = editor.getModel();
        const position = editor.getPosition();

        if (!model || !position) return;

        const apiKey = localStorage.getItem('codeCompletionApiKey');
        if (!apiKey) {
            showToast('Please set your API key first');
            return;
        }

        // Set flag to prevent new completions
        isCompletionActive = true;

        try {
            // Get context based on last 9000 characters
            const maxChars = 9000;
            const fullText = model.getValue();
            const cursorOffset = model.getOffsetAt(position);

            // Get the last 9000 characters before cursor
            const startOffset = Math.max(0, cursorOffset - maxChars);
            const context = fullText.substring(startOffset, cursorOffset);

            const response = await fetch('http://88.99.145.13:8002/v1/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: 'gpt-3.5-turbo-instruct',
                    prompt: context,
                    max_tokens: 100,
                    temperature: 0.3,
                    stop: ['\n\n']
                })
            });

            if (!response.ok) {
                console.error('Completion API error:', await response.text());
                isCompletionActive = false;
                return;
            }

            const data = await response.json();
            if (!data.choices || !data.choices[0]) {
                isCompletionActive = false;
                return;
            }

            const completion = data.choices[0].text;
            const completionLines = completion.split('\n');

            // Filter out empty lines and prepare completion
            const finalCompletion = completionLines
                .filter(line => line.trim() !== '')
                .join('\n');

            // If no valid completion, don't insert anything
            if (!finalCompletion) {
                isCompletionActive = false;
                return;
            }

            // Calculate the range for insertion at current position
            const completionRange = {
                startLineNumber: position.lineNumber,
                startColumn: position.column,
                endLineNumber: position.lineNumber,
                endColumn: position.column
            };

            // Add the completion text with only a newline after
            editor.executeEdits('completion', [{
                range: completionRange,
                text: finalCompletion + '\n',
                forceMoveMarkers: true
            }]);

            // Calculate number of lines inserted
            const insertedLines = finalCompletion.split('\n').length;

            // Update the range for decoration
            const decorationRange = {
                startLineNumber: position.lineNumber,
                startColumn: position.column,
                endLineNumber: position.lineNumber + insertedLines - 1,
                endColumn: model.getLineMaxColumn(position.lineNumber + insertedLines - 1)
            };

            // Apply grey styling to the inserted completion
            inlineDecoration = editor.deltaDecorations([], [{
                range: decorationRange,
                options: {
                    className: 'inline-suggestion',
                    inlineClassName: 'inline-suggestion',
                    stickiness: monaco.editor.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges
                }
            }]);

            // Add event listener for Tab key to accept suggestion
            const handler = editor.onKeyDown((e) => {
                if (e.keyCode === monaco.KeyCode.Tab) {
                    e.preventDefault();

                    // Remove the decoration to make text normal color
                    editor.deltaDecorations(inlineDecoration, []);

                    // Only move cursor to end of completion when Tab is pressed
                    editor.setPosition({
                        lineNumber: decorationRange.endLineNumber,
                        column: decorationRange.endColumn
                    });

                    // Reset completion flag
                    isCompletionActive = false;
                    handler.dispose();
                } else if (e.keyCode !== monaco.KeyCode.Tab) {
                    // If any other key is pressed, remove the entire completion
                    const currentLineContent = model.getLineContent(position.lineNumber);
                    const textBeforeCursor = currentLineContent.substring(0, position.column - 1);

                    editor.executeEdits('completion', [{
                        range: {
                            startLineNumber: position.lineNumber,
                            startColumn: 1,
                            endLineNumber: position.lineNumber + insertedLines - 1,
                            endColumn: model.getLineMaxColumn(position.lineNumber + insertedLines - 1)
                        },
                        text: textBeforeCursor
                    }]);
                    editor.deltaDecorations(inlineDecoration, []);

                    // Keep cursor at original position
                    editor.setPosition(position);

                    // Reset completion flag
                    isCompletionActive = false;
                    handler.dispose();
                }
            });

        } catch (error) {
            console.error('Error fetching completions:', error);
            isCompletionActive = false;
        }
    }

    // Update the editor creation with correct keybinding format
    window.editor = monaco.editor.create(document.getElementById('editor'), {
        value: '// Welcome to CablyCode\n',
        language: 'javascript',
        theme: 'vs',
        automaticLayout: true,
        minimap: { enabled: true },
        fontSize: 12,
        lineNumbers: 'on',
        roundedSelection: true,
        scrollBeyondLastLine: true,
        readOnly: false,
        cursorStyle: 'line',
        renderLineHighlight: 'all',
        scrollbar: {
            useShadows: false,
            verticalHasArrows: false,
            horizontalHasArrows: false,
            vertical: 'visible',
            horizontal: 'visible',
            verticalScrollbarSize: 11,
            horizontalScrollbarSize: 11
        },
        quickSuggestions: true,
        suggestOnTriggerCharacters: false
    });
    updateEditorTheme();
    var minimapVisible = localStorage.getItem('minimapVisible') || true;
    if (minimapVisible == "false") {
        minimapVisible = false;
    }
    minimapVisible = !minimapVisible;
    function toggleMinimap() {
        minimapVisible = !minimapVisible;
        localStorage.setItem('minimapVisible', minimapVisible);
        if (minimapVisible) {
            editor.updateOptions({ minimap: { enabled: true } });
            document.getElementById('minimap-tick').style.display = 'inline';
        } else {
            editor.updateOptions({ minimap: { enabled: false } });
            document.getElementById('minimap-tick').style.display = 'none';
        }
    }
    toggleMinimap();
    document.getElementById('toggle-minimap').addEventListener('click', toggleMinimap);
    editor.addAction({
        id: 'ai-completion',
        label: 'AI Complete',
        keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyK],
        precondition: null,
        keybindingContext: null,
        contextMenuGroupId: 'ai',  // Custom group for AI features
        contextMenuOrder: 1,
        run: triggerCompletion
    });

    // Remove these separator actions as they're no longer needed
    // editor.addAction({
    //     id: 'ai-separator-before',
    //     label: '',
    //     contextMenuGroupId: '9_cutcopypaste',
    //     contextMenuOrder: 6.9,
    //     run: () => {}
    // });
    //
    // editor.addAction({
    //     id: 'ai-separator-after',
    //     label: '',
    //     contextMenuGroupId: '9_cutcopypaste',
    //     contextMenuOrder: 7.1,
    //     run: () => {}
    // });

    // Add command to Monaco's command registry
    editor.addCommand(
        monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyK,
        triggerCompletion,
        'ai-completion'
    );

    // Remove the old auto-completion timeout code
    editor.onDidChangeModelContent((e) => {
        // Only handle non-completion related content changes
        if (isCompletionActive) return;

        // No need for completion timeout anymore
        if (completionTimeout) {
            clearTimeout(completionTimeout);
            completionTimeout = null;
        }
    });

    // When creating a tab, mark it as invalid if needed
    function createTab(filePath, content, language, isImage = false, isInvalid = false) {
        if (!isImage){
            rpc.setActivity({
                details: "Working on "+filePath.split("/")[filePath.split("/").length - 1] +" 🐱",
                startTimestamp: startDate,
                largeImageKey: 'cablycode-icon',
                instance: false,
            });
        }
        else {
            rpc.setActivity({
                details: "Viewing "+filePath.split("/")[filePath.split("/").length - 1] +" 🐱",
                startTimestamp: startDate,
                largeImageKey: 'cablycode-icon',
                instance: false,
            });
        }
        const tab = {
            id: Date.now(),
            path: filePath,
            content: content,
            language: language,
            isImage: isImage, // New flag for image tabs
            model: isImage ? null : monaco.editor.createModel(content, language), // No model for images
            saved: true,
            isInvalid: isInvalid
        };
        tabs.push(tab);
        renderTabs();
        activateTab(tab);
        updateFilePathBar(filePath);
        saveState();
        updateChatFileList();
    }
    window.createTab = createTab;
    function activateTab(tab) {
        if (!tab.isImage){
            rpc.setActivity({
                details: 'Working on '+tab.path.split("/")[tab.path.split("/").length - 1] +" 🐱",
                startTimestamp: startDate,
                largeImageKey: 'cablycode-icon',
                instance: false,
            });
        }
        else {
            rpc.setActivity({
                details: 'Viewing '+tab.path.split("/")[tab.path.split("/").length - 1] +" 🐱",
                startTimestamp: startDate,
                largeImageKey: 'cablycode-icon',
                instance: false,
            });
        }
        activeTab = tab;
        if (tab.isImage) {
            document.getElementById('editor').style.display = 'none';
            document.getElementById('image-container').style.display = 'flex';
            document.getElementById('image-container').innerHTML = tab.content;
        } else {
            document.getElementById('editor').style.display = 'block';
            document.getElementById('image-container').style.display = 'none';
            editor.setModel(tab.model);
        }
        renderTabs();
        updateFilePathBar(tab.path);
        saveState();
    }
    window.activateTab = activateTab;

    // Update the closeTab function to be async
    async function closeTab(tabId) {
        const index = tabs.findIndex(t => t.id === tabId);
        if (index !== -1) {
            const tab = tabs[index];

            if (!tab.isImage && !tab.isInvalid) { // Ensure it's not an image tab
                const currentContent = tab.model.getValue();
                let originalContent = '';
                let fileExists = true;

                try {
                    if (tab.path !== 'untitled') {
                        if (fs.existsSync(tab.path)) {
                            originalContent = fs.readFileSync(tab.path, 'utf-8');
                        } else {
                            fileExists = false;
                            showToast(`File "${path.basename(tab.path)}" no longer exists`, 5000);
                        }
                    }
                } catch (error) {
                    console.error('Error reading file:', error);
                    fileExists = false;
                }

                if (!fileExists) {
                    tab.model.dispose();
                    tabs.splice(index, 1);
                    if (activeTab && activeTab.id === tabId) {
                        if (tabs.length > 0) {
                            activateTab(tabs[index - 1] || tabs[0]);
                        } else {
                            editor.setModel(monaco.editor.createModel('', 'plaintext'));
                            activeTab = null;
                        }
                    }
                    renderTabs();
                    saveState();
                    updateChatFileList();
                    return;
                }

                if (currentContent !== originalContent && !tab.saved) {
                    const choice = await remote.dialog.showMessageBox({
                        type: 'question',
                        buttons: ['Save', "Don't Save", 'Cancel'],
                        title: 'Unsaved Changes',
                        message: `Do you want to save the changes to ${path.basename(tab.path)}?`
                    });

                    if (choice.response === 0) { // Save
                        if (tab.path === 'untitled') {
                            const result = await remote.dialog.showSaveDialog({
                                defaultPath: currentPath,
                                filters: [{ name: 'All Files', extensions: ['*'] }]
                            });

                            if (!result.canceled && result.filePath) {
                                fs.writeFileSync(result.filePath, currentContent, 'utf-8');
                                showToast('File saved successfully!');
                            } else {
                                return; // Cancel the close operation
                            }
                        } else {
                            fs.writeFileSync(tab.path, currentContent, 'utf-8');
                            showToast('File saved successfully!');
                        }
                    } else if (choice.response === 2) { // Cancel
                        return; // Cancel the close operation
                    }
                }
            }

            if (!tab.isImage) { // Dispose model only if it's not an image tab
                tab.model.dispose();
            }
            tabs.splice(index, 1);

            if (activeTab && activeTab.id === tabId) {
                if (tabs.length > 0) {
                    activateTab(tabs[index - 1] || tabs[0]);
                } else {
                    editor.setModel(monaco.editor.createModel('', 'plaintext'));
                    activeTab = null;
                }
            }
            renderTabs();
            saveState();
            updateChatFileList();
        }

        if (tabs.length === 0) {
            updateFilePathBar(null);
        }
    }

    function renderTabs() {
        const container = document.getElementById('tabs-container');
        container.innerHTML = '';

        tabs.forEach(tab => {
            const tabElement = document.createElement('div');
            tabElement.className = `tab ${activeTab && activeTab.id === tab.id ? 'active' : ''}`;

            const titleElement = document.createElement('div');
            titleElement.className = 'tab-title';

            const fileExt = path.extname(tab.path);
            const languageInfo = getLanguageFromExtension(fileExt);
            const fileIcon = languageInfo.emoji || ''; // Default to empty string if no icon

            titleElement.innerHTML = `${fileIcon}&nbsp;&nbsp;${path.basename(tab.path)}${!tab.saved ? ' *' : ''}`;

            const closeButton = document.createElement('div');
            closeButton.className = 'tab-close';
            closeButton.innerHTML = '&times;';
            closeButton.onclick = async (e) => {
                e.stopPropagation();
                await closeTab(tab.id);
            };

            tabElement.appendChild(titleElement);
            tabElement.appendChild(closeButton);
            tabElement.onclick = () => activateTab(tab);

            tabElement.addEventListener('contextmenu', (e) => {
                e.preventDefault();
                showTabContextMenu(e, tab);
            });

            container.appendChild(tabElement);
        });
    }


    function openFile(filePath) {
        return new Promise((resolve, reject) => {
            showSpinner('Loading file...');

            try {
                if (!fs.existsSync(filePath)) {
                    hideSpinner();
                    showToast(`File "${path.basename(filePath)}" does not exist`, 5000);
                    reject(new Error('File does not exist'));
                    return;
                }

                const fileExt = path.extname(filePath).toLowerCase();
                const languageInfo = getLanguageFromExtension(fileExt);

                if (languageInfo.language === 'image') {
                    // Create a new image tab instead of replacing editor content
                    const imgContent = `<img src="file://${filePath}" alt="${path.basename(filePath)}" style="max-width: 100%; max-height: 100%;">`;
                    const existingTab = tabs.find(t => t.path === filePath);
                    if (existingTab) {
                        activateTab(existingTab);
                    } else {
                        createTab(filePath, imgContent, languageInfo.language, true);
                    }
                    hideSpinner();
                    resolve();
                    return;
                }

                const content = fs.readFileSync(filePath, 'utf-8');
                const existingTab = tabs.find(t => t.path === filePath);
                if (existingTab) {
                    activateTab(existingTab);
                } else {
                    createTab(filePath, content, languageInfo.language);
                }
                saveState();
                hideSpinner();
                resolve();

            } catch (error) {
                console.error('Error opening file:', error);
                showToast(`Error opening file: ${error.message}`, 5000);
                hideSpinner();
                reject(error);
            }
        });
    }

    function showExplorerContextMenu(e, itemPath, isDirectory) {
        e.preventDefault();

        const contextMenu = document.getElementById('context-menu');
        contextMenu.innerHTML = '';

        if (isDirectory) {
            contextMenu.innerHTML = `
                        <div class="context-menu-option" data-action="newFile" data-path="${itemPath}">New File</div>
                        <div class="context-menu-option" data-action="newFolder" data-path="${itemPath}">New Folder</div>
                        <div class="context-menu-separator"></div>
                        <div class="context-menu-option" data-action="rename" data-path="${itemPath}">Rename</div>
                        <div class="context-menu-option" data-action="delete" data-path="${itemPath}">Delete</div>
                    `;
        } else {
            contextMenu.innerHTML = `
                        <div class="context-menu-option" data-action="open" data-path="${itemPath}">Open</div>
                        <div class="context-menu-separator"></div>
                        <div class="context-menu-option" data-action="rename" data-path="${itemPath}">Rename</div>
                        <div class="context-menu-option" data-action="delete" data-path="${itemPath}">Delete</div>
                    `;
        }

        contextMenu.style.display = 'block';
        contextMenu.style.left = `${e.clientX}px`;
        contextMenu.style.top = `${e.clientY}px`;

        // Ensure menu stays within window bounds
        const rect = contextMenu.getBoundingClientRect();
        if (rect.right > window.innerWidth) {
            contextMenu.style.left = `${window.innerWidth - rect.width}px`;
        }
        if (rect.bottom > window.innerHeight) {
            contextMenu.style.top = `${window.innerHeight - rect.height}px`;
        }
    }

    function saveCurrentDirectory(dirPath) {
        localStorage.setItem('lastDirectory', dirPath);
    }

    // Update loadDirectory function to ensure we save the directory
    function loadDirectory(dirPath) {
        showSpinner('Loading folder contents...');

        setTimeout(() => {
            try {
                if (!fs.existsSync(dirPath)) {
                    hideSpinner();
                    showToast(`Directory "${dirPath}" does not exist`, 5000);

                    // Show folder select dialog if directory doesn't exist
                    remote.dialog.showOpenDialog({
                        properties: ['openDirectory'],
                        title: 'Select Folder'
                    }).then(result => {
                        if (!result.canceled && result.filePaths.length > 0) {
                            loadDirectory(result.filePaths[0]);
                        }
                    });
                    return;
                }

                // Save the directory AFTER confirming it exists
                currentPath = dirPath;
                saveCurrentDirectory(dirPath);  // This saves to localStorage
                currentWorkingDirectory = dirPath; // Update the global working directory variable
                executeCommand(process.platform === 'win32' ? 'cls' : 'clear'); 

                const fileExplorer = document.getElementById('file-explorer');
                fileExplorer.innerHTML = '';

                // Show current path
                const pathElement = document.createElement('div');
                pathElement.style.padding = '5px';
                pathElement.style.fontSize = '11px';
                pathElement.style.color = '#666';
                pathElement.textContent = dirPath;
                fileExplorer.appendChild(pathElement);

                // Add "Go Back" option if not at root drive
                if (dirPath.toLowerCase() !== 'c:/') {
                    const backElement = document.createElement('div');
                    backElement.className = 'folder-item';
                    backElement.innerHTML = '<svg viewBox="0 0 1024 1024" class="icon" version="1.1" xmlns="http://www.w3.org/2000/svg" width="20px" height="20px"><path d="M853.333333 256H469.333333l-85.333333-85.333333H170.666667c-46.933333 0-85.333333 38.4-85.333334 85.333333v170.666667h853.333334v-85.333334c0-46.933333-38.4-85.333333-85.333334-85.333333z" fill="#FFA000"/><path d="M853.333333 256H170.666667c-46.933333 0-85.333333 38.4-85.333334 85.333333v426.666667c0 46.933333 38.4 85.333333 85.333334 85.333333h682.666666c46.933333 0 85.333333-38.4 85.333334-85.333333V341.333333c0-46.933333-38.4-85.333333-85.333334-85.333333z" fill="#FFCA28"/></svg> ..';
                    backElement.onclick = () => {
                        const parentPath = path.dirname(dirPath);
                        if (parentPath.match(/^[A-Z]:\\$/i)) {
                            loadDirectory('C:/');
                        } else {
                            loadDirectory(parentPath);
                        }
                    };
                    fileExplorer.appendChild(backElement);
                }

                const items = fs.readdirSync(dirPath);
                items.sort((a, b) => {
                    try {
                        const aStats = fs.statSync(path.join(dirPath, a));
                        const bStats = fs.statSync(path.join(dirPath, b));
                        if (aStats.isDirectory() && !bStats.isDirectory()) return -1;
                        if (!aStats.isDirectory() && bStats.isDirectory()) return 1;
                        return a.localeCompare(b);
                    } catch (error) {
                        return 0;
                    }
                });

                items.forEach(item => {
                    try {
                        //if (item.startsWith('.')) return;

                        const itemPath = path.join(dirPath, item);
                        if (!fs.existsSync(itemPath)) return;

                        const stats = fs.statSync(itemPath);
                        const element = document.createElement('div');

                        const languageInfo = getLanguageFromExtension(path.extname(item), stats.isDirectory()); // Add isDirectory here
                        const emoji = languageInfo.emoji; // Get the emoji for the language

                        if (stats.isDirectory()) {
                            element.className = 'folder-item';
                            element.onclick = () => loadDirectory(itemPath);
                        } else {
                            element.className = 'file-item';
                            element.onclick = () => openFile(itemPath);
                        }

                        // Change this line to render the emoji as HTML and filename as plain text:
                        element.innerHTML = `${emoji}&nbsp;${item}`; // Render emoji as HTML and filename as plain text

                        element.dataset.path = itemPath;

                        element.addEventListener('contextmenu', (e) => {
                            showExplorerContextMenu(e, itemPath, stats.isDirectory());
                        });

                        element.addEventListener('dblclick', (e) => {
                            e.stopPropagation();
                            startRename(element, itemPath);
                        });

                        fileExplorer.appendChild(element);
                    } catch (error) {
                        console.error(`Error processing item ${item}:`, error);
                    }
                });

                hideSpinner();
            } catch (error) {
                console.error('Error loading directory:', error);
                hideSpinner();
                showToast(`Error loading directory: ${error.message}`, 5000);

                // Show folder select dialog on error
                remote.dialog.showOpenDialog({
                    properties: ['openDirectory'],
                    title: 'Select Folder'
                }).then(result => {
                    if (!result.canceled && result.filePaths.length > 0) {
                        loadDirectory(result.filePaths[0]);
                    }
                });
            }
        }, 100);

        // After successfully loading the directory, update the watcher
        if (folderWatcher) {
            clearInterval(folderWatcher);
        }

        lastFolderContents = getFolderContents(dirPath);
        folderWatcher = setInterval(() => compareFolderContents(dirPath), 1000);
    }

    function showSpinner(message = 'Loading...') {
        const overlay = document.querySelector('.spinner-overlay');
        const messageEl = document.querySelector('.spinner-message');
        messageEl.textContent = message;
        overlay.style.display = 'flex';
    }

    function hideSpinner() {
        const overlay = document.querySelector('.spinner-overlay');
        overlay.style.display = 'none';
    }

    function updateFilePathBar(filePath) {
        const pathBar = document.getElementById('file-path-bar');
        if (filePath && filePath !== 'untitled') {
            pathBar.textContent = filePath;
            pathBar.style.display = 'flex';
        } else {
            pathBar.textContent = '';
            pathBar.style.display = 'none';
        }
    }

    function showToast(message, duration = 3000) {
        const toast = document.getElementById('toast');
        toast.textContent = message;
        toast.style.display = 'block';

        setTimeout(() => {
            toast.style.display = 'none';
        }, duration);
    }

    function getFolderContents(dirPath) {
        try {
            return new Set(fs.readdirSync(dirPath));
        } catch (error) {
            console.error('Error reading directory:', error);
            return new Set();
        }
    }

    function compareFolderContents(dirPath) {
        const currentContents = getFolderContents(dirPath);
        const previousContents = lastFolderContents;

        // Find new items
        const newItems = [...currentContents].filter(x => !previousContents.has(x));
        // Find removed items
        const removedItems = [...previousContents].filter(x => !currentContents.has(x));

        if (newItems.length > 0) {
            console.log('New files/folders detected:', newItems);
            loadDirectory(dirPath); // Refresh the file explorer
        }
        if (removedItems.length > 0) {
            console.log('Files/folders removed:', removedItems);
            loadDirectory(dirPath); // Refresh the file explorer
        }

        lastFolderContents = currentContents;
    }

    function checkFileContent(tab) {
        if (!tab || tab.path === 'untitled' || tab.isInvalid || tab.path.includes(':old-')) return; 
        try {
            if (!fs.existsSync(tab.path)) {
                console.log(`File no longer exists: ${tab.path}`);
                return;
            }

            const diskContent = fs.readFileSync(tab.path, 'utf-8');
            const editorContent = tab.model.getValue();

            if (diskContent !== editorContent) {
                console.log('File not saved:', path.basename(tab.path));
                if (tab.saved) {
                    tab.saved = false;
                    renderTabs(); // Update the tab display
                }
                return false;
            } else if (!tab.saved) {
                tab.saved = true;
                renderTabs(); // Update the tab display
            }
            return true;
        } catch (error) {
            console.error('Error checking file content:', error);
            return false;
        }
    }

    // Add window event listeners
    window.addEventListener('beforeunload', () => {
        if (folderWatcher) {
            clearInterval(folderWatcher);
        }
        saveState();
    });

    // Add periodic content checking
    setInterval(() => {
        tabs.forEach(tab => {
            checkFileContent(tab);
        });
    }, 1000);

    // THEN, add all event handlers

    // Update the Exit menu option handler
    document.querySelectorAll('.menu-option').forEach(option => {
        option.addEventListener('click', async (e) => {
            const action = e.target.textContent;
            switch (action) {
                case 'New Window':
                    remote.app.emit('create-new-window');
                    break;

                case 'New File':
                    createTab('untitled', '', 'plaintext');
                    break;

                case 'Open File...':
                    const result = await remote.dialog.showOpenDialog({
                        properties: ['openFile']
                    });
                    if (!result.canceled && result.filePaths.length > 0) {
                        openFile(result.filePaths[0]);
                    }
                    break;

                case 'Open Folder...':
                    const folderResult = await remote.dialog.showOpenDialog({
                        properties: ['openDirectory']
                    });
                    if (!folderResult.canceled && folderResult.filePaths.length > 0) {
                        loadDirectory(folderResult.filePaths[0]);
                    }
                    break;

                case 'Save':
                    if (activeTab) {
                        if (activeTab.path.includes(':old-') || activeTab.isImage) {
                            showToast('Cant save');
                            return; // Prevent saving
                        }
                        if (activeTab.path === 'untitled') {
                            const saveResult = await remote.dialog.showSaveDialog({
                                defaultPath: currentPath,
                                filters: [{ name: 'All Files', extensions: ['*'] }]
                            });
                            if (activeTab.path.includes(':old-')) {
                                showToast('Cannot save files with ":old-" in the title');
                                return; // Prevent saving
                            }

                            if (!saveResult.canceled && saveResult.filePath) {
                                const content = editor.getValue();
                                fs.writeFileSync(saveResult.filePath, content, 'utf-8');
                                activeTab.path = saveResult.filePath;
                                activeTab.saved = true;
                                const language = getLanguageFromExtension(path.extname(saveResult.filePath));
                                activeTab.language = language;
                                activeTab.model.dispose();
                                activeTab.model = monaco.editor.createModel(content, language);
                                editor.setModel(activeTab.model);
                                renderTabs();
                                updateFilePathBar(saveResult.filePath);
                                saveState();
                                showToast('File saved successfully!');
                            }
                        } else {
                            const content = editor.getValue();
                            fs.writeFileSync(activeTab.path, content, 'utf-8');
                            activeTab.saved = true;
                            renderTabs();
                            saveState();
                            showToast('File saved successfully!');
                        }
                    }
                    break;

                case 'Save As...':
                    if (activeTab) {
                        if (activeTab.path.includes(':old-') || activeTab.isImage) {
                            showToast('Cant save');
                            return; // Prevent saving
                        }
                        const saveAsResult = await remote.dialog.showSaveDialog({
                            defaultPath: currentPath,
                            filters: [{ name: 'All Files', extensions: ['*'] }]
                        });

                        if (!saveAsResult.canceled && saveAsResult.filePath) {
                            const content = editor.getValue();
                            fs.writeFileSync(saveAsResult.filePath, content, 'utf-8');
                            activeTab.path = saveAsResult.filePath;
                            activeTab.saved = true;
                            const language = getLanguageFromExtension(path.extname(saveAsResult.filePath));
                            activeTab.language = language;
                            activeTab.model.dispose();
                            activeTab.model = monaco.editor.createModel(content, language);
                            editor.setModel(activeTab.model);
                            renderTabs();
                            updateFilePathBar(saveAsResult.filePath);
                            saveState();
                            showToast('File saved successfully!');
                        }
                    }
                    break;

                case 'Exit':
                    const window = remote.getCurrentWindow();

                    // Check for unsaved changes before closing
                    const unsavedTabs = tabs.filter(tab => !tab.saved);
                    if (unsavedTabs.length > 0) {
                        const choice = await remote.dialog.showMessageBox({
                            type: 'question',
                            buttons: ['Save All', "Don't Save", 'Cancel'],
                            title: 'Unsaved Changes',
                            message: `You have ${unsavedTabs.length} unsaved file(s). Do you want to save them before closing?`
                        });

                        if (choice.response === 0) { // Save All
                            for (const tab of unsavedTabs) {
                                if (tab.path === 'untitled') {
                                    const result = await remote.dialog.showSaveDialog({
                                        defaultPath: currentPath,
                                        filters: [{ name: 'All Files', extensions: ['*'] }]
                                    });

                                    if (!result.canceled && result.filePath) {
                                        fs.writeFileSync(result.filePath, tab.model.getValue(), 'utf-8');
                                    } else {
                                        return; // Cancel the close operation if user cancels save
                                    }
                                } else {
                                    fs.writeFileSync(tab.path, tab.model.getValue(), 'utf-8');
                                }
                            }
                        } else if (choice.response === 2) { // Cancel
                            return;
                        }
                    }

                    // Clean up and force quit
                    if (folderWatcher) {
                        clearInterval(folderWatcher);
                    }
                    remote.app.quit();
                    break;
            }
        });
    });

    // Add context menu handlers
    document.getElementById('context-menu').addEventListener('click', async (e) => {
        const action = e.target.dataset.action;
        const itemPath = e.target.dataset.path;

        if (!action || !itemPath) return;

        switch (action) {
            case 'open':
                openFile(itemPath);
                break;

            case 'newFile':
                const fileResult = await remote.dialog.showSaveDialog({
                    title: 'New File',
                    defaultPath: path.join(itemPath, 'untitled.txt'),
                    properties: ['showOverwriteConfirmation']
                });
                if (!fileResult.canceled && fileResult.filePath) {
                    fs.writeFileSync(fileResult.filePath, '');
                    loadDirectory(currentPath);
                }
                break;

            case 'newFolder':
                const folderName = await remote.dialog.showMessageBox({
                    title: 'New Folder',
                    message: 'Enter folder name:',
                    buttons: ['OK', 'Cancel'],
                    defaultId: 0,
                    cancelId: 1,
                    prompt: true,
                    inputValue: 'New Folder'
                });
                if (folderName.response === 0 && folderName.input) {
                    const newFolderPath = path.join(itemPath, folderName.input);
                    fs.mkdirSync(newFolderPath);
                    loadDirectory(currentPath);
                }
                break;

            case 'rename':
                const element = Array.from(document.querySelectorAll('.file-item, .folder-item'))
                    .find(el => el.dataset.path === itemPath);
                if (element) {
                    startRename(element, itemPath);
                }
                break;

            case 'delete':
                const choice = await remote.dialog.showMessageBox({
                    type: 'question',
                    buttons: ['Yes', 'No'],
                    title: 'Confirm',
                    message: `Are you sure you want to delete ${path.basename(itemPath)}?`
                });
                if (choice.response === 0) {
                    try {
                        if (fs.statSync(itemPath).isDirectory()) {
                            fs.rmdirSync(itemPath, { recursive: true });
                        } else {
                            fs.unlinkSync(itemPath);
                        }
                        loadDirectory(currentPath);
                    } catch (error) {
                        showToast(`Error deleting: ${error.message}`, 5000);
                    }
                }
                break;
        }

        document.getElementById('context-menu').style.display = 'none';
    });

    // Hide context menu when clicking outside
    document.addEventListener('click', (e) => {
        if (!e.target.closest('#context-menu')) {
            document.getElementById('context-menu').style.display = 'none';
        }
    });

    // Update the window control handlers
    document.getElementById('minimize-button').addEventListener('click', () => {
        const window = remote.getCurrentWindow();
        window.minimize();
    });

    document.getElementById('maximize-button').addEventListener('click', () => {
        const window = remote.getCurrentWindow();
        if (window.isMaximized()) {
            window.unmaximize();
        } else {
            window.maximize();
        }
    });

    document.getElementById('close-button').addEventListener('click', async () => {
        const window = remote.getCurrentWindow();

        // Check for unsaved changes before closing
        const unsavedTabs = tabs.filter(tab => !tab.saved);
        if (unsavedTabs.length > 0) {
            const choice = await remote.dialog.showMessageBox({
                type: 'question',
                buttons: ['Save All', "Don't Save", 'Cancel'],
                title: 'Unsaved Changes',
                message: `You have ${unsavedTabs.length} unsaved file(s). Do you want to save them before closing?`
            });

            if (choice.response === 0) { // Save All
                for (const tab of unsavedTabs) {
                    if (tab.path === 'untitled') {
                        const result = await remote.dialog.showSaveDialog({
                            defaultPath: currentPath,
                            filters: [{ name: 'All Files', extensions: ['*'] }]
                        });

                        if (!result.canceled && result.filePath) {
                            fs.writeFileSync(result.filePath, tab.model.getValue(), 'utf-8');
                        } else {
                            return; // Cancel the close operation if user cancels save
                        }
                    } else {
                        fs.writeFileSync(tab.path, tab.model.getValue(), 'utf-8');
                    }
                }
            } else if (choice.response === 2) { // Cancel
                return;
            }
        }

        // Clean up and force quit
        if (folderWatcher) {
            clearInterval(folderWatcher);
        }
        remote.app.quit();
    });

    // Add this function after the editor creation and before other functions
    function saveState() {
        const state = tabs.map(tab => ({
            path: tab.path,
            content: tab.isImage ? null : tab.model.getValue(), // Skip content for image tabs
            language: tab.language,
            saved: tab.saved
        }));

        localStorage.setItem('editorState', JSON.stringify({
            tabs: state,
            activeTabId: activeTab ? activeTab.id : null
        }));
        loadGitStatus();
    }

    function loadState() {
        try {
            const savedState = localStorage.getItem('editorState');
            if (savedState) {
                const state = JSON.parse(savedState);

                tabs.forEach(tab => tab.model.dispose());
                tabs = [];

                const openPaths = new Set();
                state.tabs.forEach(tabState => {
                    if (openPaths.has(tabState.path)) return;

                    if (tabState.path !== 'untitled' && fs.existsSync(tabState.path)) {
                        try {
                            const diskContent = fs.readFileSync(tabState.path, 'utf-8');
                            const fileExt = path.extname(tabState.path).toLowerCase();
                            const languageInfo = getLanguageFromExtension(fileExt);

                            if (languageInfo.language === 'image') {
                                // Handle image files
                                //const imgContent = `<img src="file://${tabState.path}" alt="${path.basename(tabState.path)}" style="max-width: 100%; max-height: 100%;">`;
                                //createTab(tabState.path, imgContent, languageInfo.language, true);
                            } else {
                                // Handle non-image files
                                createTab(tabState.path, diskContent, languageInfo.language);
                            }

                            openPaths.add(tabState.path);
                            if (tabs.length > 0) {
                                const lastTab = tabs[tabs.length - 1];
                                lastTab.saved = (diskContent === tabState.content);
                            }
                        } catch (error) {
                            console.error('Error reading file:', error);
                        }
                    } else if (!tabState.isImage) { // Ensure it's not an image tab
                        createTab(tabState.path, tabState.content, tabState.language);
                        openPaths.add(tabState.path);
                        if (tabs.length > 0) {
                            const lastTab = tabs[tabs.length - 1];
                            lastTab.saved = tabState.saved;
                        }
                    }
                });

                if (state.activeTabId && tabs.length > 0) {
                    const tabToActivate = tabs[0];
                    activateTab(tabToActivate);
                }
            }
        } catch (error) {
            console.error('Error loading editor state:', error);
        }
    }

    // Update the editor change handler
    editor.getModel()?.onDidChangeContent((event) => {
        if (activeTab) {
            console.log(`File changed: ${path.basename(activeTab.path)}`);
            console.log('Change event:', event);
            if (activeTab.saved) {
                activeTab.saved = false;
                renderTabs(); // Update the tab display
            }
            saveState();

            // Check content against disk
            checkFileContent(activeTab);
        }
    });

    // Add this line after creating the editor and before loading the initial state
    loadState();

    // Add the startRename function
    function startRename(element, itemPath) {
        const input = document.createElement('input');
        input.className = 'rename-input';
        input.value = path.basename(itemPath);

        // Prevent the default click behavior while renaming
        element.onclick = (e) => e.stopPropagation();

        element.appendChild(input);
        input.focus();

        // Select the name without extension for files
        const ext = path.extname(input.value);
        const nameWithoutExt = path.basename(input.value, ext);
        input.setSelectionRange(0, nameWithoutExt.length);

        input.addEventListener('blur', () => finishRename(element, input, itemPath));
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                input.blur();
            } else if (e.key === 'Escape') {
                input.remove();
                resetElementClickHandler(element, itemPath);
            }
        });
    }

    function finishRename(element, input, oldPath) {
        const newName = input.value.trim();
        const oldName = path.basename(oldPath);

        if (newName && newName !== oldName) {
            try {
                const newPath = path.join(path.dirname(oldPath), newName);
                fs.renameSync(oldPath, newPath);

                // Update any open tabs with this file
                const tab = tabs.find(t => t.path === oldPath);
                if (tab) {
                    tab.path = newPath;
                    renderTabs();
                    updateFilePathBar(newPath);
                }

                // Refresh the file explorer
                loadDirectory(currentPath);
            } catch (error) {
                console.error('Error renaming:', error);
                showToast(`Error renaming: ${error.message}`, 5000);
            }
        }

        input.remove();
        resetElementClickHandler(element, oldPath);
    }

    function resetElementClickHandler(element, itemPath) {
        const stats = fs.statSync(itemPath);
        if (stats.isDirectory()) {
            element.onclick = () => loadDirectory(itemPath);
        } else {
            element.onclick = () => openFile(itemPath);
        }
    }

    // Update the initial directory loading logic
    loadState();
    try {
        const lastDirectory = localStorage.getItem('lastDirectory');

        if (lastDirectory && fs.existsSync(lastDirectory)) {
            loadDirectory(lastDirectory);
        } else {
            // Show folder select dialog if no saved directory or it doesn't exist
            remote.dialog.showOpenDialog({
                properties: ['openDirectory'],
                title: 'Select Folder'
            }).then(result => {
                if (!result.canceled && result.filePaths.length > 0) {
                    loadDirectory(result.filePaths[0]);
                } else {
                    // Only fall back to C:/ if user cancels dialog
                    if (fs.existsSync('C:/')) {
                        loadDirectory('C:/');
                    } else {
                        showToast('Please select a valid folder to continue', 5000);
                    }
                }
                hideSpinner(); // Hide spinner after directory is loaded
            });
        }
    } catch (error) {
        console.error('Error loading last directory:', error);
        hideSpinner(); // Hide spinner on error
        // Show folder select dialog on error
        remote.dialog.showOpenDialog({
            properties: ['openDirectory'],
            title: 'Select Folder'
        }).then(result => {
            if (!result.canceled && result.filePaths.length > 0) {
                loadDirectory(result.filePaths[0]);
            } else {
                if (fs.existsSync('C:/')) {
                    loadDirectory('C:/');
                } else {
                    showToast('Please select a valid folder to continue', 5000);
                }
            }
            hideSpinner(); // Hide spinner after directory is loaded
        });
    }

    // Add API key modal handlers here, before the initial directory loading
    document.getElementById('set-api-key').addEventListener('click', () => {
        const modal = document.getElementById('api-key-modal');
        const input = document.getElementById('api-key-input');
        input.value = localStorage.getItem('codeCompletionApiKey') || '';
        const modelSelect = document.getElementById('model-select');
        modelSelect.value = localStorage.getItem('selectedModel') || 'gpt-4o-mini';
        modal.style.display = 'flex';
    });

    document.getElementById('cancel-api-key').addEventListener('click', () => {
        document.getElementById('api-key-modal').style.display = 'none';
    });

    document.getElementById('save-api-key').addEventListener('click', () => {
        const apiKey = document.getElementById('api-key-input').value.trim();
        const selectedModel = document.getElementById('model-select').value;
        if (apiKey) {
            localStorage.setItem('codeCompletionApiKey', apiKey);
            localStorage.setItem('selectedModel', selectedModel);
            showToast('API key saved successfully!');
        } else {
            localStorage.removeItem('codeCompletionApiKey');
            localStorage.removeItem('selectedModel');
            showToast('API key removed');
        }
        document.getElementById('api-key-modal').style.display = 'none';
    });

    // Close modal when clicking outside
    document.getElementById('api-key-modal').addEventListener('click', (e) => {
        if (e.target.id === 'api-key-modal') {
            e.target.style.display = 'none';
        }
    });

    // AI Chat functionality
    const chatButton = document.getElementById('ai-chat-button');
    const chatModal = document.getElementById('chat-modal');
    const chatClose = document.getElementById('chat-close');
    const chatInput = document.getElementById('chat-input');
    const chatSend = document.getElementById('chat-send');
    const chatMessages = document.getElementById('chat-messages');

    chatButton.addEventListener('click', () => {
        chatModal.style.display = 'flex';
        updateChatFileList();
    });

    chatClose.addEventListener('click', () => {
        chatModal.style.display = 'none';
    });

    chatInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendChatMessage();
        }
    });

    chatSend.addEventListener('click', sendChatMessage);

    // Update the sendChatMessage function
    async function sendChatMessage() {
        const message = chatInput.value.trim();
        if (!message) return;

        const apiKey = localStorage.getItem('codeCompletionApiKey');
        if (!apiKey) {
            showToast('Please set your API key first');
            return;
        }

        // Prepare user messages and files
        const userMessages = [];
        const selectedFiles = [];
        document.querySelectorAll('.chat-file-checkbox:checked').forEach(checkbox => {
            const filePath = checkbox.dataset.path;
            const tab = tabs.find(t => t.path === filePath);
            if (tab) {
                const fileExt = path.extname(filePath).toLowerCase();
                if (['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg'].includes(fileExt)) {
                    // Read image as binary and convert to base64
                    const imageData = fs.readFileSync(filePath);
                    const base64Image = imageData.toString('base64');
                    selectedFiles.push({
                        role: 'user',
                        content: [
                            {
                                type: "image_url",
                                image_url: { url: `data:image/${fileExt.slice(1)};base64,${base64Image}` }
                            }
                        ]
                    });
                } else {
                    selectedFiles.push({
                        role: 'user',
                        content: tab.model.getValue()
                    });
                }
            }
        });

        // Add user message
        userMessages.push({
            role: 'user',
            content: message
        });

        // Add chat message UI
        addChatMessage(message, 'user');
        chatInput.value = '';

        // Combine messages and files
        const allMessages = [...selectedFiles, ...userMessages];

        try {
            const response = await fetch('http://88.99.145.13:8002/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: localStorage.getItem('selectedModel'),
                    messages: allMessages,
                    temperature: 0.7
                })
            });

            if (!response.ok) {
                const errorText = await response.text();
                if (errorText.includes('maximum context length')) {
                    addChatMessage('Error: Maximum context length exceeded. Please select fewer files or send a shorter message.', 'ai error');
                } else if (errorText.includes('Out of credits')) {
                    addChatMessage('Error: Out of credits', 'ai error');
                } else {
                    addChatMessage('Error: ' + errorText, 'ai error');
                }
                return;
            }

            const data = await response.json();
            const aiResponse = data.choices[0].message.content.trim();
            addChatMessage(aiResponse, 'ai');
        } catch (error) {
            console.error('Chat error:', error);
            addChatMessage('Error: ' + error.message, 'ai error');
        }
    }

    function addChatMessage(message, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${type}-message`;

        if (type === 'ai') {
            // Parse markdown and add syntax highlighting
            messageDiv.innerHTML = marked.parse(message, {
                highlight: function (code, lang) {
                    if (lang && hljs.getLanguage(lang)) {
                        return hljs.highlight(code, { language: lang }).value;
                    }
                    return hljs.highlightAuto(code).value;
                }
            });
        } else if (type === 'ai error') {
            messageDiv.textContent = message;
            messageDiv.className = 'chat-message ai-message error';
        } else {
            messageDiv.textContent = message;
        }

        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    /* Update the chat file list function */
    function updateChatFileList() {
        const fileList = document.getElementById('chat-file-list');
        fileList.innerHTML = '';  // Clear all items

        tabs.forEach(tab => {
            if (tab.path === 'untitled') return;

            const item = document.createElement('div');
            item.className = 'chat-file-item';

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'chat-file-checkbox';
            checkbox.dataset.path = tab.path;
            checkbox.checked = true;  // Default to checked

            const label = document.createElement('span');
            label.textContent = path.basename(tab.path);

            item.appendChild(checkbox);
            item.appendChild(label);
            fileList.appendChild(item);
        });
    }

    /* Add these functions for tab context menu */
    function showTabContextMenu(e, tab) {
        // Remove any existing context menus
        removeTabContextMenu();

        const menu = document.createElement('div');
        menu.className = 'tab-context-menu';
        menu.style.left = `${e.clientX}px`;
        menu.style.top = `${e.clientY}px`;

        // Close
        const closeItem = document.createElement('div');
        closeItem.className = 'tab-context-menu-item';
        closeItem.textContent = 'Close';
        closeItem.onclick = () => closeTab(tab.id);
        menu.appendChild(closeItem);

        // Close All
        const closeAllItem = document.createElement('div');
        closeAllItem.className = 'tab-context-menu-item';
        closeAllItem.textContent = 'Close All';
        closeAllItem.onclick = closeAllTabs;
        menu.appendChild(closeAllItem);

        // Separator
        const separator = document.createElement('div');
        separator.className = 'tab-context-menu-separator';
        menu.appendChild(separator);

        // Close Others
        const closeOthersItem = document.createElement('div');
        closeOthersItem.className = 'tab-context-menu-item';
        closeOthersItem.textContent = 'Close Others';
        closeOthersItem.onclick = () => closeOtherTabs(tab.id);
        menu.appendChild(closeOthersItem);

        document.body.appendChild(menu);

        // Close menu when clicking outside
        setTimeout(() => {
            document.addEventListener('click', removeTabContextMenu, { once: true });
        }, 0);
    }

    function removeTabContextMenu() {
        const existingMenu = document.querySelector('.tab-context-menu');
        if (existingMenu) {
            existingMenu.remove();
        }
    }

    async function closeAllTabs() {
        for (const tab of [...tabs]) {
            await closeTab(tab.id);
        }
        removeTabContextMenu();
    }

    async function closeOtherTabs(currentTabId) {
        for (const tab of [...tabs]) {
            if (tab.id !== currentTabId) {
                await closeTab(tab.id);
            }
        }
        removeTabContextMenu();
    }
    // Update the searchFiles function
    async function searchFiles(query) {
        // Cancel any ongoing search immediately
        if (currentSearchController) {
            currentSearchController.abort();
            currentSearchController = null;
        }

        // Create new controller for this search
        currentSearchController = new AbortController();
        const signal = currentSearchController.signal;

        const searchResults = document.getElementById('search-results');
        const searchStatus = document.getElementById('search-status');
        const currentFolderPath = localStorage.getItem('lastDirectory');

        // Don't search if query is empty
        if (!query.trim()) {
            searchResults.innerHTML = '';
            searchStatus.style.display = 'none';
            return;
        }

        // Show searching status
        searchStatus.style.display = 'block';
        searchResults.innerHTML = '';

        if (!currentFolderPath) {
            searchStatus.style.display = 'none';
            showToast('No folder path found in local storage.', 5000);
            return;
        }

        // Set timeout for this search
        const timeoutId = setTimeout(() => {
            if (currentSearchController) {
                currentSearchController.abort();
                searchStatus.style.display = 'none';
                showToast('Search completed or stopped after 5 seconds', 3000);
            }
        }, 5000);

        try {
            async function* findInFiles(dir) {
                const items = await fs.promises.readdir(dir);

                for (const item of items) {
                    // Check if search was aborted
                    if (signal.aborted) return;

                    const fullPath = path.join(dir, item);
                    const stats = await fs.promises.stat(fullPath);

                    if (stats.isDirectory()) {
                        yield* findInFiles(fullPath);
                    } else {
                        try {
                            const content = await fs.promises.readFile(fullPath, 'utf-8');
                            const lines = content.split('\n');

                            for (let i = 0; i < lines.length; i++) {
                                if (signal.aborted) return;
                                if (lines[i].toLowerCase().includes(query.toLowerCase())) {
                                    yield {
                                        lineNumber: i + 1,
                                        path: fullPath,
                                        name: item
                                    };
                                    break; // Only show first match per file
                                }
                            }
                        } catch (error) {
                            console.error(`Error reading file ${fullPath}:`, error);
                        }
                    }
                }
            }

            let resultCount = 0;
            for await (const match of findInFiles(currentFolderPath)) {
                if (signal.aborted) break;

                const resultElement = document.createElement('div');
                resultElement.className = 'search-result-item';

                // Update the search result click handler in searchFiles function
                resultElement.onmousedown = async function () {
                    const filePath = match.path;
                    const lineNumber = match.lineNumber;

                    try {
                        // First open the file
                        await openFile(filePath);

                        // Create a promise to wait for editor to be ready
                        const waitForEditor = new Promise((resolve) => {
                            const checkEditor = setInterval(() => {
                                if (window.editor && window.editor.getModel()) {
                                    clearInterval(checkEditor);
                                    resolve();
                                }
                            }, 50); // Check every 50ms

                            // Timeout after 5 seconds
                            setTimeout(() => {
                                clearInterval(checkEditor);
                                resolve();
                            }, 5000);
                        });

                        // Wait for editor to be ready
                        await waitForEditor;

                        // Now navigate to the line
                        window.editor.revealLineInCenter(lineNumber);
                        window.editor.setPosition({
                            lineNumber: lineNumber,
                            column: 1
                        });

                        // Add decoration to highlight the line
                        const decorations = window.editor.deltaDecorations([], [{
                            range: new monaco.Range(lineNumber, 1, lineNumber, 1),
                            options: {
                                isWholeLine: true,
                                className: 'lineHighlight',
                                linesDecorationsClassName: 'lineDecoration'
                            }
                        }]);

                        // Remove the decoration after 2 seconds
                        setTimeout(() => {
                            window.editor.deltaDecorations(decorations, []);
                        }, 2000);

                    } catch (error) {
                        console.error('Error opening file:', error);
                        showToast('Error opening file: ' + error.message);
                    }
                };

                const relativePath = path.relative(currentFolderPath, match.path);

                resultElement.innerHTML = `
                <div class="file-item">${match.name}</div>
                <div class="result-path">${relativePath}:${match.lineNumber}</div>
            `;

                searchResults.appendChild(resultElement);
                resultCount++;
            }

            if (resultCount === 0 && !signal.aborted) {
                searchResults.innerHTML = '<div style="padding: 10px; color: #858585;">No results found</div>';
            }
        } catch (error) {
            if (error.name === 'AbortError') {
                console.log('Search was stopped.');
            } else {
                console.error('Search error:', error);
                searchResults.innerHTML = '<div style="padding: 10px; color: #ff6b6b;">Error during search</div>';
            }
        } finally {
            clearTimeout(timeoutId);
            if (!signal.aborted) {
                searchStatus.style.display = 'none';
            }
            // Clear the current controller if this search is done
            if (signal.aborted) {
                currentSearchController = null;
            }
        }
    }

    // Update the search input handler
    document.getElementById('search-input').addEventListener('keydown', function (e) {
        if (e.key === 'Enter') {
            const query = e.target.value.trim();
            if (query) {
                // Abort any ongoing search before starting a new one
                if (currentSearchController) {
                    currentSearchController.abort();
                    currentSearchController = null;
                }
                searchFiles(query);
            } else {
                // Clear results if search is empty
                document.getElementById('search-results').innerHTML = '';
                document.getElementById('search-status').style.display = 'none';
            }
        }
    });
    // Utility function for debouncing (if not already defined)
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    const git = Git();

    document.getElementById('git-icon').addEventListener('click', function () {
        const gitContainer = document.getElementById('git-container');
        const searchContainer = document.getElementById('search-container');
        const fileExplorer = document.getElementById('file-explorer');
        document.getElementById('extension-icon').classList.remove('active');
        document.getElementById('ext-container').style.display= 'none';
        const explorerIcon = document.getElementById('explorer-icon');
        const searchIcon = document.getElementById('search-icon');
        document.querySelector('.explorer-title').textContent = 'VERSION CONTROL';

        // Toggle the visibility of the git container
        if (gitContainer.style.display === 'none' || gitContainer.style.display === '') {
            gitContainer.style.display = 'block';
            this.classList.add('active');

            // Hide search and explorer
            searchContainer.style.display = 'none';
            fileExplorer.style.display = 'none';
            explorerIcon.classList.remove('active');
            searchIcon.classList.remove('active');

        } else {

            // Optionally, you can show the explorer by default when closing Git
            // fileExplorer.style.display = 'block';
            // explorerIcon.classList.add('active');
        }

        // Load Git status or any other Git-related information
        loadGitStatus();
    });

async function showCommitDetails(commit) {
    const commitDetailsContent = document.getElementById('commit-details-content');
    commitDetailsContent.innerHTML = ''; // Clear previous content

    // Fetch changed files for the commit
    const changedFiles = await git.show([commit.hash, '--name-status']);
    const filesListElement = document.createElement('ul');
    const lines = changedFiles.split('\n');
    let filesHeaderAdded = false;

    for (const line of lines) {
        const match = line.match(/^(M|A|D)\s+(.*)/);
        if (match) {
            const filePath = match[2].trim();
            const changeType = match[1]; // 'M', 'A', or 'D'

            // Create a list item for each changed file
            const listItem = document.createElement('li');
            listItem.className = 'commit-item';
            listItem.textContent = `${changeType === 'A' ? '+' : changeType === 'D' ? '-' : '~'} ${filePath}`;

            // Add click event to each item to open code changes in a new tab
            listItem.addEventListener('click', async () => {
                const diff = await git.diff([`${commit.hash}~1`, commit.hash, '--', filePath]);
                createTab(filePath+":old-"+commit.hash, diff, 'diff'); // Open diff in a new tab
                document.getElementById('commit-details-modal').style.display = 'none'; // Close modal
            });

            filesListElement.appendChild(listItem);
        }
    }

    commitDetailsContent.appendChild(filesListElement);
    const modal = document.getElementById('commit-details-modal');
    modal.style.display = 'flex'; // Show the commit details modal
}

    async function loadGitStatus() {
        const gitContainer = document.getElementById('git-status');
        gitContainer.innerHTML = ''; // Clear existing content

        try {
            // Check if the current directory is a Git repository
            const isRepo = await git.checkIsRepo();

            if (isRepo) {
                // Check if there are any commits
                const log = await git.log({ maxCount: 1 }).catch(() => null);

                if (!log || !log.latest) {
                    const noCommitsElement = document.createElement('div');
                    noCommitsElement.textContent = 'No commits found yet. Start by making your first commit.';
                    gitContainer.appendChild(noCommitsElement);
                    return;
                }

                // Get the current status of the repository
                const statusSummary = await git.status();

                // Display the current branch
                const branchElement = document.createElement('div');
                branchElement.className = 'git-branch';
                branchElement.textContent = `Current Branch: ${statusSummary.current}`;
                gitContainer.appendChild(branchElement);

                if (statusSummary.files.length === 0) {
                    const noChangesElement = document.createElement('div');
                    noChangesElement.textContent = 'No changes to commit';
                    gitContainer.appendChild(noChangesElement);
                } else {
                    statusSummary.files.forEach(file => {
                        const fileElement = document.createElement('div');
                        fileElement.className = 'git-changed-file';
                        fileElement.textContent = `${file.path} (${file.working_dir})`;
                        gitContainer.appendChild(fileElement);
                    });
                }

                // Display the latest commit message
                const commitElement = document.createElement('div');
                commitElement.className = 'git-latest-commit';
                commitElement.textContent = `Latest Commit: ${log.latest.message}`;
                gitContainer.appendChild(commitElement);

            } else {
                const initRepoButton = document.createElement('button');
                initRepoButton.textContent = 'Init Repo';
                initRepoButton.className = 'init-repo-button';
                initRepoButton.onclick = async () => {
                    try {
                        await git.init();
                        await git.addConfig('user.name', 'CablyCode');
                        await git.addConfig('user.email', 'cablycode@example.com');
                        // Create a .gitignore file if it doesn't exist
                        const gitignorePath = path.join(currentPath, '.gitignore');
                        if (!fs.existsSync(gitignorePath)) {
                            const defaultGitignoreContent = `node_modules/
node_modules/
*.log
.DS_Store
git/
dist/
Thumbs.db
__pycache__/
*.tmp
*.swp
*.swo`;

                            fs.writeFileSync(gitignorePath, defaultGitignoreContent.trim());
                        }
                        showToast('Repository initialized successfully!');
                        loadGitStatus(); // Refresh Git status
                    } catch (error) {
                        console.error('Error initializing repo:', error);
                        showToast('Error initializing repository: ' + error.message, 5000);
                    }
                };
                gitContainer.appendChild(initRepoButton);
            }
        } catch (error) {
            console.error('Error loading Git status:', error);
            const errorElement = document.createElement('div');
            errorElement.textContent = 'Error loading Git status';
            gitContainer.appendChild(errorElement);
        }
    }


async function commitChanges() {
    const commitMessage = document.getElementById('commit-message').value.trim();
    if (!commitMessage) {
        showToast('Please enter a commit message');
        return;
    }

    showSpinner('Committing changes...');

    try {
        // Ensure that the .gitignore file is added to the repository
        await git.add('.gitignore');

        // Add all changes, respecting .gitignore
        await git.add(`./`)

        // Commit with the provided message
        await git.commit(commitMessage);

        showToast('Changes committed successfully!'); // Show toast message
        document.getElementById('commit-message').value = ''; // Clear the commit message field
        loadGitStatus(); // Refresh the Git status
    } catch (error) {
        console.error('Error committing changes:', error);
        showToast('Error committing changes: ' + error.message); // Show error toast message
    } finally {
        hideSpinner(); // Ensure spinner is hidden regardless of success or failure
    }
}
    document.getElementById('commit-button').addEventListener('click', commitChanges);

document.getElementById('show-all-commits').addEventListener('click', async () => {
    try {
        const log = await git.log();

        const commitsContainer = document.createElement('div');
        commitsContainer.className = 'commits-list';

        log.all.forEach(commit => {
            const commitElement = document.createElement('div');
            commitElement.className = 'commit-item';
            commitElement.textContent = `${commit.date}: ${commit.message} (${commit.hash.substring(0, 7)})`;

            // Add click event to each commit item
            commitElement.addEventListener('click', () => {
                showCommitDetails(commit);
            });

            commitsContainer.appendChild(commitElement);
        });

        const gitContainer = document.getElementById('git-status');
        gitContainer.innerHTML = ''; // Clear existing content
        gitContainer.appendChild(commitsContainer);
    } catch (error) {
        alert('Error fetching commits:' + error);
        showToast('Error fetching commits: ' + error.message);
    }
    
});

document.getElementById('cancel-commit-details').addEventListener('click', () => {
    document.getElementById('commit-details-modal').style.display = 'none';
});

// Close modal when clicking outside
document.getElementById('commit-details-modal').addEventListener('click', (e) => {
    if (e.target.id === 'commit-details-modal') {
        e.target.style.display = 'none';
    }
});



























});
// Update the search icon click handler
document.getElementById('search-icon').addEventListener('click', function () {
    this.classList.add('active');
    document.getElementById('explorer-icon').classList.remove('active');
    document.getElementById('git-icon').classList.remove('active'); // Remove active class from git-icon
    document.getElementById('extension-icon').classList.remove('active');
    // Hide Git container
    document.getElementById('git-container').style.display = 'none';

    // Store the current file explorer content before hiding it
    const fileExplorer = document.getElementById('file-explorer');
    document.getElementById('ext-container').style.display= 'none';
    fileExplorer.style.display = 'none';
    document.getElementById('search-container').style.display = 'flex';

    // Update explorer title
    document.querySelector('.explorer-title').textContent = 'SEARCH';

    // Focus the search input
    document.getElementById('search-input').focus();
});
// Update the explorer icon click handler
document.getElementById('explorer-icon').addEventListener('click', function () {
    this.classList.add('active');
    document.getElementById('search-icon').classList.remove('active');
    document.getElementById('git-icon').classList.remove('active'); // Remove active class from git-icon
    document.getElementById('extension-icon').classList.remove('active');
    // Hide Git container
    document.getElementById('git-container').style.display = 'none';

    // Show file explorer and hide search container
    document.getElementById('file-explorer').style.display = 'block';
    document.getElementById('ext-container').style.display= 'none';
    document.getElementById('search-container').style.display = 'none';

    // Update explorer title back
    document.querySelector('.explorer-title').textContent = 'EXPLORER';

    // Reload the current directory to refresh the file explorer
    const currentDir = localStorage.getItem('lastDirectory');
    if (currentDir) {
        loadDirectory(currentDir);
    }
});

document.getElementById('extension-icon').addEventListener('click', function () {
    this.classList.add('active');
    loadExtensions();
    document.getElementById('search-icon').classList.remove('active');
    document.getElementById('git-icon').classList.remove('active'); // Remove active class from git-icon

    document.getElementById('explorer-icon').classList.remove('active');
    document.getElementById('git-container').style.display = 'none';

    // Show file explorer and hide search container
    document.getElementById('file-explorer').style.display = 'none';
    document.getElementById('ext-container').style.display= 'block';
    document.getElementById('search-container').style.display = 'none';

    // Update explorer title back
    document.querySelector('.explorer-title').textContent = 'EXTENSION STORE';

    // Reload the current directory to refresh the file explorer
    const currentDir = localStorage.getItem('lastDirectory');
    if (currentDir) {
        loadDirectory(currentDir);
    }
});




document.getElementById('toggle-sidebar').addEventListener('click', function () {
    const sidebar = document.getElementById('sidebar');
    const sideBar = document.getElementById('side-bar');
    const tick = document.getElementById('sidebar-tick');

    if (sidebar.style.display === 'none') {
        sidebar.style.display = 'flex';
        sideBar.style.display = 'flex';
        tick.style.display = 'inline'; // Show tick when sidebar is visible
        localStorage.setItem('sidebarVisible', 'true'); // Save state to localStorage
    } else {
        sidebar.style.display = 'none';
        sideBar.style.display = 'none';
        tick.style.display = 'none'; // Hide tick when sidebar is hidden
        localStorage.setItem('sidebarVisible', 'false'); // Save state to localStorage
    }
});

const consoleContainer = document.getElementById('console-container');
consoleContainer.style.height='0px';
const totalContainer = document.getElementById('container');


const terminal = new Terminal({
    cursorBlink: true,
    rows: 12,
    cols: Math.floor((totalContainer.clientWidth - 55) / 9) // Adjust based on average character width
});
terminal.open(consoleContainer);
terminal.write(`$ [${currentWorkingDirectory}] `);

// Handle window resize to adjust terminal size
window.addEventListener('resize', () => {
    const newCols = Math.floor((totalContainer.clientWidth - 55) / 9); // Recalculate columns
    terminal.resize(newCols, terminal.rows); // Resize terminal
});

consoleContainer.addEventListener('click', () => {
    terminal.focus(); // Focus terminal when clicked
});

// Function to toggle console visibility
function toggleConsole() {
    // Check if the terminal is already created

    const terminalHeight = 220; // Total height for 12 rows

    if (consoleContainer.style.height === '0px') {
        consoleContainer.style.height = `${terminalHeight}px`; // Set to calculated height
        consoleContainer.style.display = 'block'; // Show console container
        document.getElementById("container").style.height = `calc(100vh - ${terminalHeight}px)`; // Adjust the main container height
    } else {
        consoleContainer.style.height = '0px'; // Collapse console
        setTimeout(() => {
            consoleContainer.style.display = 'none'; // Hide console after collapse
            document.getElementById("container").style.height = "100vh"; // Reset the main container height
        }, 200); // Delay to allow for collapsing animation
    }
}

// Event listener for the console button
document.getElementById('console-button').addEventListener('click', toggleConsole);


// Listen for input from the terminal
let currentCommand = ""; // Variable to hold the current command
let commandHistory = []; // Array to hold the command history
let commandHistoryIndex = -1; // Index for the command history

let isProcessingCommand = false; // Flag to track if a command is being processed

let waitingForInput = false; // New variable to track if we're waiting for input

// Listen for input from the terminal
terminal.onData((data) => {
    if (data === '\u0003') { // Ctrl + C
        if (currentChildProcess) {
            currentChildProcess.kill('SIGINT'); // Send SIGINT to the child process
            terminal.write('\r\nCommand terminated.\r\n');
            isProcessingCommand=false;
            currentChildProcess = null;
        }
        currentCommand = '';
        terminal.write(`\r\n$ [${currentWorkingDirectory}] `);
        return;
    }
    if (isProcessingCommand) {
        return;
    }

    // Handle Enter key
    if (data === '\r') { // Enter key
        terminal.write('\r\n');
        executeCommand(currentCommand); // Execute the command
        commandHistory.push(currentCommand); // Add command to history
        commandHistoryIndex = commandHistory.length; // Reset history index
        currentCommand = ''; // Reset the command buffer
    } else if (data === '\u007F') { // Backspace
        if (currentCommand.length > 0) {
            currentCommand = currentCommand.slice(0, -1);
            terminal.write('\b \b');
        }
    } else if (data === 'ArrowUp') {
        if (commandHistoryIndex > 0) {
            commandHistoryIndex--;
            currentCommand = commandHistory[commandHistoryIndex];
            terminal.write(`\r\n$ ${currentCommand}`);
        }
    } else if (data === 'ArrowDown') {
        if (commandHistoryIndex < commandHistory.length - 1) {
            commandHistoryIndex++;
            currentCommand = commandHistory[commandHistoryIndex];
            terminal.write(`\r\n$ ${currentCommand}`);
        } else {
            currentCommand = '';
            terminal.write('\r\n$ ');
        }
    } else {
        currentCommand += data; // Append the input data to the current command
        terminal.write(data); // Echo data to the terminal
    }
});

let currentChildProcess=null;
// Function to execute commands
// Function to execute commands
function executeCommand(command) {
    if (!command) return; // Do nothing if command is empty

    terminal.write('\r\n'); // Move to the next line for output

    const commandParts = command.split(' ');
    const cmd = commandParts[0];
    const args = commandParts.slice(1);
    isProcessingCommand = true;

    // Use spawn to run the command
    currentChildProcess = spawn(cmd, args, { cwd: currentWorkingDirectory, shell: true });

    // Capture stdout and write it to the terminal
    currentChildProcess.stdout.on('data', (data) => {
        // Convert data to string, clean it up, and ensure it behaves like a terminal
        const output = data.toString();
        // Split output by lines and write each line separately
        const outputLines = output.split('\n');
        outputLines.forEach((line, index) => {
            if (line) { // Only write non-empty lines
                terminal.write(line.trimRight() + (index < outputLines.length - 1 ? '\r\n' : '')); // Trim trailing spaces
            }
        });
    });

    // Capture stderr and write it to the terminal
    currentChildProcess.stderr.on('data', (data) => {
        terminal.write(`\x1b[31mError: ${data.toString().trim()}\x1b[0m\r\n`); // Write error in red and trim
    });

    // Handle process exit
    currentChildProcess.on('exit', (code) => {
        terminal.write(`\r\n$ [${currentWorkingDirectory}] `); // Reset prompt
        isProcessingCommand = false; // Reset the processing flag
        currentChildProcess = null; // Reset the currentChildProcess variable
    });

    // Handle process error (like command not found)
    currentChildProcess.on('error', (err) => {
        terminal.write(`\x1b[31mError: Unable to start process: ${err.message}\x1b[0m\r\n`); // Display error in red
        isProcessingCommand = false; // Reset the processing flag
        currentChildProcess = null; // Reset the currentChildProcess variable
    });

    // After starting the command, you can reset the current command
    currentCommand = '';
}
// Clear terminal functionality
// Clear terminal functionality
function clearTerminal() {
    terminal.clear();
    currentCommand = ''; // Reset current command
    commandHistoryIndex = commandHistory.length; // Reset command history index
}
// Event listener to clear the terminal when button is clicked
document.getElementById('clear-console-button').addEventListener('click', clearTerminal);

async function loadExtensions() {
    const extContainer = document.getElementById('ext-container');
    extContainer.innerHTML = ''; // Clear existing content
    const installedExtensions = JSON.parse(localStorage.getItem('installedExtensions')) || [];

    

    // Now try to fetch the available extensions
    try {
        const response = await fetch('https://raw.githubusercontent.com/meow18838/CablyCode/refs/heads/main/extensions.json');
        if (!response.ok) {

            // Display installed extensions if fetch fails
            if (installedExtensions.length === 0) {
                extContainer.innerHTML = '<div>No extensions installed.</div>';
                return;
            }

            // Load installed extensions
            installedExtensions.forEach(extension => {
                const card = document.createElement('div');
                card.className = 'extension-card';
                card.innerHTML = `
                    <h3 class="extension-title">${extension.name}</h3>
                    <p class="extension-description">${extension.description}</p>
                    <div style="display: flex; align-items: center;">
                        <button class="install-button" data-name="${extension.name}">
                            Uninstall
                        </button>
                        ${extension.warn ? `<span class="warning-icon" title="Uses Internet" style="position: absolute; top: 8px; right: 12px;">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="#FFFF00" width="40" height="40" viewBox="0 0 24 24">
                                    <path d="M3.44722 18.1056L10.2111 4.57771C10.9482 3.10361 13.0518 3.10362 13.7889 4.57771L20.5528 18.1056C21.2177 19.4354 20.2507 21 18.7639 21H5.23607C3.7493 21 2.78231 19.4354 3.44722 18.1056Z" stroke="#FF0000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <path d="M12 10L12 14" stroke="#FF0000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                    <circle cx="12" cy="17" r="1" fill="#FF0000"/>
                                </svg>
                            </span>` : ''}
                    </div>
                `;

                // Add click event to the uninstall button
                card.querySelector('.install-button').onclick = function() {
                    uninstallExtension(extension);
                };

                extContainer.appendChild(card);
            });
        }

        const extensions = await response.json();

        extensions.forEach(extension => {
            // Create card element
            const card = document.createElement('div');
            card.className = 'extension-card';
            card.innerHTML = `
                <h3 class="extension-title">${extension.name}</h3>
                <p class="extension-description">${extension.description}</p>
                <div style="display: flex; align-items: center;">
                    <button class="install-button" data-name="${extension.name}">
                        ${installedExtensions.some(ext => ext.name === extension.name) ? 'Uninstall' : 'Install'}
                    </button>
                    ${extension.warn ? `<span class="warning-icon" title="Uses Internet" style="position: absolute; top: 8px; right: 12px;">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="#FFFF00" width="40" height="40" viewBox="0 0 24 24">
                                <path d="M3.44722 18.1056L10.2111 4.57771C10.9482 3.10361 13.0518 3.10362 13.7889 4.57771L20.5528 18.1056C21.2177 19.4354 20.2507 21 18.7639 21H5.23607C3.7493 21 2.78231 19.4354 3.44722 18.1056Z" stroke="#FF0000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M12 10L12 14" stroke="#FF0000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <circle cx="12" cy="17" r="1" fill="#FF0000"/>
                            </svg>
                        </span>` : ''}
                </div>
            `;

            // Add click event to the button
            card.querySelector('.install-button').onclick = function() {
                if (installedExtensions.some(ext => ext.name === extension.name)) {
                    uninstallExtension(extension);
                } else {
                    installExtension(extension);
                }
            };

            extContainer.appendChild(card);
        });
    } catch (err) {
        console.warn('Failed to fetch extensions:', err);
        // Only show installed extensions if fetching fails
        if (installedExtensions.length === 0) {
            extContainer.innerHTML = '<div>No extensions installed.</div>';
        }
    }
}

function installExtension(extension) {
    const installedExtensions = JSON.parse(localStorage.getItem('installedExtensions')) || [];
    
    // Check if the extension is already installed
    if (!installedExtensions.some(ext => ext.name === extension.name)) {
        installedExtensions.push(extension);
        localStorage.setItem('installedExtensions', JSON.stringify(installedExtensions));
        alert(`${extension.name} has been installed!\nReload to see changes.`);
    } else {
        alert(`${extension.name} is already installed.`);
    }

    // Update UI to reflect the installed status
    updateExtensionButton(extension.name);
}

function uninstallExtension(extension) {
    const installedExtensions = JSON.parse(localStorage.getItem('installedExtensions')) || [];

    // Filter out the extension to be uninstalled
    const updatedExtensions = installedExtensions.filter(ext => ext.name !== extension.name);
    localStorage.setItem('installedExtensions', JSON.stringify(updatedExtensions));

    alert(`${extension.name} has been uninstalled!\nReload to see changes.`); // Optional feedback
    updateExtensionButton(extension.name); // Update the button text
    loadExtensions(); // Reload extensions to update the UI
}

function updateExtensionButton(name) {
    try{
    const button = document.querySelector(`.install-button[data-name="${name}"]`);
    if (button) {
        // Check if the extension is installed
        const installedExtensions = JSON.parse(localStorage.getItem('installedExtensions')) || [];
        const isInstalled = installedExtensions.some(ext => ext.name === name);
        
        // Update button text based on the installed status
        button.textContent = isInstalled ? 'Uninstall' : 'Install'; 

        // Add click event listener
        button.onclick = function() {
            if (isInstalled) {
                uninstallExtension({ name }); // Uninstall action
            } else {
                installExtension({ name }); // Install action
            }
        }
    }
    }catch(err){alert(err)}
}
